diff --git a/node_modules/thrift/lib/nodejs/lib/thrift/http_connection.js b/node_modules/thrift/lib/nodejs/lib/thrift/http_connection.js
index 17e0d0c..9e90096 100644
--- a/node_modules/thrift/lib/nodejs/lib/thrift/http_connection.js
+++ b/node_modules/thrift/lib/nodejs/lib/thrift/http_connection.js
@@ -106,7 +106,7 @@ var HttpConnection = exports.HttpConnection = function(options) {
   //  calling client in multiplexed scenarios
   this.seqId2Service = {};
 
-  function decodeCallback(transport_with_data) {
+  function decodeCallback(transport_with_data, handleError) {
     var proto = new self.protocol(transport_with_data);
     try {
       while (true) {
@@ -146,10 +146,11 @@ var HttpConnection = exports.HttpConnection = function(options) {
           client['recv_' + header.fname](proto, header.mtype, dummy_seqid);
         } else {
           delete client._reqs[dummy_seqid];
-          self.emit("error",
+          handleError(
                     new thrift.TApplicationException(
                        thrift.TApplicationExceptionType.WRONG_METHOD_NAME,
-                       "Received a response to an unknown RPC function"));
+                       "Received a response to an unknown RPC function")
+          );
         }
       }
     }
@@ -157,7 +158,7 @@ var HttpConnection = exports.HttpConnection = function(options) {
       if (e instanceof InputBufferUnderrunError) {
         transport_with_data.rollbackPosition();
       } else {
-        self.emit('error', e);
+        handleError(e);
       }
     }
   }
@@ -165,17 +166,17 @@ var HttpConnection = exports.HttpConnection = function(options) {
 
   //Response handler
   //////////////////////////////////////////////////
-  this.responseCallback = function(response) {
+  this.responseCallback = function(response, handleError) {
     var data = [];
     var dataLen = 0;
 
     if (response.statusCode !== 200) {
-      this.emit("error", new THTTPException(response));
+      handleError(new THTTPException(response));
+      response.destroy();
+      return;
     }
 
-    response.on('error', function (e) {
-      self.emit("error", e);
-    });
+    response.on('error', handleError);
 
     // When running directly under node, chunk will be a buffer,
     // however, when running in a Browser (e.g. Browserify), chunk
@@ -199,7 +200,9 @@ var HttpConnection = exports.HttpConnection = function(options) {
       }
       //Get the receiver function for the transport and
       //  call it with the buffer
-      self.transport.receiver(decodeCallback)(buf);
+      self.transport.receiver(function(transport_with_data) {
+        return decodeCallback(transport_with_data, handleError);
+      })(buf);
     });
   };
 };
@@ -212,18 +215,33 @@ util.inherits(HttpConnection, EventEmitter);
  * @event {error} the "error" event is raised upon request failure passing the
  *     Node.js error object to the listener.
  */
-HttpConnection.prototype.write = function(data) {
+HttpConnection.prototype.write = function(data, seqid) {
   var self = this;
   var opts = self.nodeOptions;
   opts.headers["Content-length"] = data.length;
   if (!opts.headers["Content-Type"])
     opts.headers["Content-Type"] = "application/x-thrift";
+
+  // The purpose of this handler is to pass an error to corresponding operation's callback if
+  // error is associated with any. If error cannot be associated with any operation, it will be
+  // emitted as 'error' event
+  function handleError(err) {
+    var client = self.client;
+    var callback = client._reqs[seqid] || function() {
+      self.emit("error", err);
+    };
+    delete client._reqs[seqid];
+    callback(err);
+  }
+
+  function responseCallback(response) {
+    return self.responseCallback(response, handleError);
+  }
+
   var req = (self.https) ?
-      https.request(opts, self.responseCallback) :
-      http.request(opts, self.responseCallback);
-  req.on('error', function(err) {
-    self.emit("error", err);
-  });
+      https.request(opts, responseCallback) :
+      http.request(opts, responseCallback);
+  req.on('error', handleError);
   req.write(data);
   req.end();
 };
