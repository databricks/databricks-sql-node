//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TProtocolVersion = {
  '__HIVE_JDBC_WORKAROUND' : -7,
  '__TEST_PROTOCOL_VERSION' : 65281,
  'HIVE_CLI_SERVICE_PROTOCOL_V1' : 0,
  'HIVE_CLI_SERVICE_PROTOCOL_V2' : 1,
  'HIVE_CLI_SERVICE_PROTOCOL_V3' : 2,
  'HIVE_CLI_SERVICE_PROTOCOL_V4' : 3,
  'HIVE_CLI_SERVICE_PROTOCOL_V5' : 4,
  'HIVE_CLI_SERVICE_PROTOCOL_V6' : 5,
  'HIVE_CLI_SERVICE_PROTOCOL_V7' : 6,
  'HIVE_CLI_SERVICE_PROTOCOL_V8' : 7,
  'HIVE_CLI_SERVICE_PROTOCOL_V9' : 8,
  'HIVE_CLI_SERVICE_PROTOCOL_V10' : 9,
  'SPARK_CLI_SERVICE_PROTOCOL_V1' : 42241,
  'SPARK_CLI_SERVICE_PROTOCOL_V2' : 42242,
  'SPARK_CLI_SERVICE_PROTOCOL_V3' : 42243,
  'SPARK_CLI_SERVICE_PROTOCOL_V4' : 42244,
  'SPARK_CLI_SERVICE_PROTOCOL_V5' : 42245,
  'SPARK_CLI_SERVICE_PROTOCOL_V6' : 42246,
  'SPARK_CLI_SERVICE_PROTOCOL_V7' : 42247,
  'SPARK_CLI_SERVICE_PROTOCOL_V8' : 42248
};
ttypes.TTypeId = {
  'BOOLEAN_TYPE' : 0,
  'TINYINT_TYPE' : 1,
  'SMALLINT_TYPE' : 2,
  'INT_TYPE' : 3,
  'BIGINT_TYPE' : 4,
  'FLOAT_TYPE' : 5,
  'DOUBLE_TYPE' : 6,
  'STRING_TYPE' : 7,
  'TIMESTAMP_TYPE' : 8,
  'BINARY_TYPE' : 9,
  'ARRAY_TYPE' : 10,
  'MAP_TYPE' : 11,
  'STRUCT_TYPE' : 12,
  'UNION_TYPE' : 13,
  'USER_DEFINED_TYPE' : 14,
  'DECIMAL_TYPE' : 15,
  'NULL_TYPE' : 16,
  'DATE_TYPE' : 17,
  'VARCHAR_TYPE' : 18,
  'CHAR_TYPE' : 19,
  'INTERVAL_YEAR_MONTH_TYPE' : 20,
  'INTERVAL_DAY_TIME_TYPE' : 21
};
ttypes.TSparkRowSetType = {
  'ARROW_BASED_SET' : 0,
  'COLUMN_BASED_SET' : 1,
  'ROW_BASED_SET' : 2,
  'URL_BASED_SET' : 3
};
ttypes.TDBSqlCompressionCodec = {
  'NONE' : 0,
  'LZ4_FRAME' : 1,
  'LZ4_BLOCK' : 2
};
ttypes.TDBSqlArrowLayout = {
  'ARROW_BATCH' : 0,
  'ARROW_STREAMING' : 1
};
ttypes.TOperationIdempotencyType = {
  'UNKNOWN' : 0,
  'NON_IDEMPOTENT' : 1,
  'IDEMPOTENT' : 2
};
ttypes.TOperationTimeoutLevel = {
  'CLUSTER' : 0,
  'SESSION' : 1
};
ttypes.TStatusCode = {
  'SUCCESS_STATUS' : 0,
  'SUCCESS_WITH_INFO_STATUS' : 1,
  'STILL_EXECUTING_STATUS' : 2,
  'ERROR_STATUS' : 3,
  'INVALID_HANDLE_STATUS' : 4
};
ttypes.TOperationState = {
  'INITIALIZED_STATE' : 0,
  'RUNNING_STATE' : 1,
  'FINISHED_STATE' : 2,
  'CANCELED_STATE' : 3,
  'CLOSED_STATE' : 4,
  'ERROR_STATE' : 5,
  'UKNOWN_STATE' : 6,
  'PENDING_STATE' : 7,
  'TIMEDOUT_STATE' : 8
};
ttypes.TOperationType = {
  'EXECUTE_STATEMENT' : 0,
  'GET_TYPE_INFO' : 1,
  'GET_CATALOGS' : 2,
  'GET_SCHEMAS' : 3,
  'GET_TABLES' : 4,
  'GET_TABLE_TYPES' : 5,
  'GET_COLUMNS' : 6,
  'GET_FUNCTIONS' : 7,
  'UNKNOWN' : 8
};
ttypes.TGetInfoType = {
  'CLI_MAX_DRIVER_CONNECTIONS' : 0,
  'CLI_MAX_CONCURRENT_ACTIVITIES' : 1,
  'CLI_DATA_SOURCE_NAME' : 2,
  'CLI_FETCH_DIRECTION' : 8,
  'CLI_SERVER_NAME' : 13,
  'CLI_SEARCH_PATTERN_ESCAPE' : 14,
  'CLI_DBMS_NAME' : 17,
  'CLI_DBMS_VER' : 18,
  'CLI_ACCESSIBLE_TABLES' : 19,
  'CLI_ACCESSIBLE_PROCEDURES' : 20,
  'CLI_CURSOR_COMMIT_BEHAVIOR' : 23,
  'CLI_DATA_SOURCE_READ_ONLY' : 25,
  'CLI_DEFAULT_TXN_ISOLATION' : 26,
  'CLI_IDENTIFIER_CASE' : 28,
  'CLI_IDENTIFIER_QUOTE_CHAR' : 29,
  'CLI_MAX_COLUMN_NAME_LEN' : 30,
  'CLI_MAX_CURSOR_NAME_LEN' : 31,
  'CLI_MAX_SCHEMA_NAME_LEN' : 32,
  'CLI_MAX_CATALOG_NAME_LEN' : 34,
  'CLI_MAX_TABLE_NAME_LEN' : 35,
  'CLI_SCROLL_CONCURRENCY' : 43,
  'CLI_TXN_CAPABLE' : 46,
  'CLI_USER_NAME' : 47,
  'CLI_TXN_ISOLATION_OPTION' : 72,
  'CLI_INTEGRITY' : 73,
  'CLI_GETDATA_EXTENSIONS' : 81,
  'CLI_NULL_COLLATION' : 85,
  'CLI_ALTER_TABLE' : 86,
  'CLI_ORDER_BY_COLUMNS_IN_SELECT' : 90,
  'CLI_SPECIAL_CHARACTERS' : 94,
  'CLI_MAX_COLUMNS_IN_GROUP_BY' : 97,
  'CLI_MAX_COLUMNS_IN_INDEX' : 98,
  'CLI_MAX_COLUMNS_IN_ORDER_BY' : 99,
  'CLI_MAX_COLUMNS_IN_SELECT' : 100,
  'CLI_MAX_COLUMNS_IN_TABLE' : 101,
  'CLI_MAX_INDEX_SIZE' : 102,
  'CLI_MAX_ROW_SIZE' : 104,
  'CLI_MAX_STATEMENT_LEN' : 105,
  'CLI_MAX_TABLES_IN_SELECT' : 106,
  'CLI_MAX_USER_NAME_LEN' : 107,
  'CLI_OJ_CAPABILITIES' : 115,
  'CLI_XOPEN_CLI_YEAR' : 10000,
  'CLI_CURSOR_SENSITIVITY' : 10001,
  'CLI_DESCRIBE_PARAMETER' : 10002,
  'CLI_CATALOG_NAME' : 10003,
  'CLI_COLLATION_SEQ' : 10004,
  'CLI_MAX_IDENTIFIER_LEN' : 10005
};
ttypes.TResultPersistenceMode = {
  'ONLY_LARGE_RESULTS' : 0,
  'ALL_QUERY_RESULTS' : 1,
  'ALL_RESULTS' : 2
};
ttypes.TDBSqlCloseOperationReason = {
  'NONE' : 0,
  'COMMAND_INACTIVITY_TIMEOUT' : 1
};
ttypes.TCacheLookupResult = {
  'CACHE_INELIGIBLE' : 0,
  'LOCAL_CACHE_HIT' : 1,
  'REMOTE_CACHE_HIT' : 2,
  'CACHE_MISS' : 3
};
ttypes.TCloudFetchDisabledReason = {
  'ARROW_SUPPORT' : 0,
  'CLOUD_FETCH_SUPPORT' : 1,
  'PROTOCOL_VERSION' : 2,
  'REGION_SUPPORT' : 3,
  'BLOCKLISTED_OPERATION' : 4,
  'SMALL_RESULT_SIZE' : 5,
  'CUSTOMER_STORAGE_SUPPORT' : 6,
  'UNKNOWN' : 7
};
ttypes.TDBSqlManifestFileFormat = {
  'THRIFT_GET_RESULT_SET_METADATA_RESP' : 0
};
ttypes.TFetchOrientation = {
  'FETCH_NEXT' : 0,
  'FETCH_PRIOR' : 1,
  'FETCH_RELATIVE' : 2,
  'FETCH_ABSOLUTE' : 3,
  'FETCH_FIRST' : 4,
  'FETCH_LAST' : 5
};
ttypes.TDBSqlFetchDisposition = {
  'DISPOSITION_UNSPECIFIED' : 0,
  'DISPOSITION_INLINE' : 1,
  'DISPOSITION_EXTERNAL_LINKS' : 2,
  'DISPOSITION_INTERNAL_DBFS' : 3
};
ttypes.TJobExecutionStatus = {
  'IN_PROGRESS' : 0,
  'COMPLETE' : 1,
  'NOT_AVAILABLE' : 2
};
TTypeQualifierValue = module.exports.TTypeQualifierValue = function(args) {
  this.i32Value = null;
  this.stringValue = null;
  if (args) {
    if (args.i32Value !== undefined && args.i32Value !== null) {
      this.i32Value = args.i32Value;
    }
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
  }
};
TTypeQualifierValue.prototype = {};
TTypeQualifierValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.i32Value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeQualifierValue.prototype.write = function(output) {
  output.writeStructBegin('TTypeQualifierValue');
  if (this.i32Value !== null && this.i32Value !== undefined) {
    output.writeFieldBegin('i32Value', Thrift.Type.I32, 1);
    output.writeI32(this.i32Value);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 2);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTypeQualifiers = module.exports.TTypeQualifiers = function(args) {
  this.qualifiers = null;
  if (args) {
    if (args.qualifiers !== undefined && args.qualifiers !== null) {
      this.qualifiers = Thrift.copyMap(args.qualifiers, [ttypes.TTypeQualifierValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field qualifiers is unset!');
    }
  }
};
TTypeQualifiers.prototype = {};
TTypeQualifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.qualifiers = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = new ttypes.TTypeQualifierValue();
          val7.read(input);
          this.qualifiers[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeQualifiers.prototype.write = function(output) {
  output.writeStructBegin('TTypeQualifiers');
  if (this.qualifiers !== null && this.qualifiers !== undefined) {
    output.writeFieldBegin('qualifiers', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.qualifiers));
    for (var kiter8 in this.qualifiers)
    {
      if (this.qualifiers.hasOwnProperty(kiter8))
      {
        var viter9 = this.qualifiers[kiter8];
        output.writeString(kiter8);
        viter9.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPrimitiveTypeEntry = module.exports.TPrimitiveTypeEntry = function(args) {
  this.type = null;
  this.typeQualifiers = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.typeQualifiers !== undefined && args.typeQualifiers !== null) {
      this.typeQualifiers = new ttypes.TTypeQualifiers(args.typeQualifiers);
    }
  }
};
TPrimitiveTypeEntry.prototype = {};
TPrimitiveTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.typeQualifiers = new ttypes.TTypeQualifiers();
        this.typeQualifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPrimitiveTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TPrimitiveTypeEntry');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.typeQualifiers !== null && this.typeQualifiers !== undefined) {
    output.writeFieldBegin('typeQualifiers', Thrift.Type.STRUCT, 2);
    this.typeQualifiers.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TArrayTypeEntry = module.exports.TArrayTypeEntry = function(args) {
  this.objectTypePtr = null;
  if (args) {
    if (args.objectTypePtr !== undefined && args.objectTypePtr !== null) {
      this.objectTypePtr = args.objectTypePtr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field objectTypePtr is unset!');
    }
  }
};
TArrayTypeEntry.prototype = {};
TArrayTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.objectTypePtr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TArrayTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TArrayTypeEntry');
  if (this.objectTypePtr !== null && this.objectTypePtr !== undefined) {
    output.writeFieldBegin('objectTypePtr', Thrift.Type.I32, 1);
    output.writeI32(this.objectTypePtr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TMapTypeEntry = module.exports.TMapTypeEntry = function(args) {
  this.keyTypePtr = null;
  this.valueTypePtr = null;
  if (args) {
    if (args.keyTypePtr !== undefined && args.keyTypePtr !== null) {
      this.keyTypePtr = args.keyTypePtr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field keyTypePtr is unset!');
    }
    if (args.valueTypePtr !== undefined && args.valueTypePtr !== null) {
      this.valueTypePtr = args.valueTypePtr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field valueTypePtr is unset!');
    }
  }
};
TMapTypeEntry.prototype = {};
TMapTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.keyTypePtr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.valueTypePtr = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMapTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TMapTypeEntry');
  if (this.keyTypePtr !== null && this.keyTypePtr !== undefined) {
    output.writeFieldBegin('keyTypePtr', Thrift.Type.I32, 1);
    output.writeI32(this.keyTypePtr);
    output.writeFieldEnd();
  }
  if (this.valueTypePtr !== null && this.valueTypePtr !== undefined) {
    output.writeFieldBegin('valueTypePtr', Thrift.Type.I32, 2);
    output.writeI32(this.valueTypePtr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStructTypeEntry = module.exports.TStructTypeEntry = function(args) {
  this.nameToTypePtr = null;
  if (args) {
    if (args.nameToTypePtr !== undefined && args.nameToTypePtr !== null) {
      this.nameToTypePtr = Thrift.copyMap(args.nameToTypePtr, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nameToTypePtr is unset!');
    }
  }
};
TStructTypeEntry.prototype = {};
TStructTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.nameToTypePtr = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readI32();
          this.nameToTypePtr[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStructTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TStructTypeEntry');
  if (this.nameToTypePtr !== null && this.nameToTypePtr !== undefined) {
    output.writeFieldBegin('nameToTypePtr', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.nameToTypePtr));
    for (var kiter18 in this.nameToTypePtr)
    {
      if (this.nameToTypePtr.hasOwnProperty(kiter18))
      {
        var viter19 = this.nameToTypePtr[kiter18];
        output.writeString(kiter18);
        output.writeI32(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUnionTypeEntry = module.exports.TUnionTypeEntry = function(args) {
  this.nameToTypePtr = null;
  if (args) {
    if (args.nameToTypePtr !== undefined && args.nameToTypePtr !== null) {
      this.nameToTypePtr = Thrift.copyMap(args.nameToTypePtr, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nameToTypePtr is unset!');
    }
  }
};
TUnionTypeEntry.prototype = {};
TUnionTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size20 = 0;
        var _rtmp324;
        this.nameToTypePtr = {};
        var _ktype21 = 0;
        var _vtype22 = 0;
        _rtmp324 = input.readMapBegin();
        _ktype21 = _rtmp324.ktype;
        _vtype22 = _rtmp324.vtype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var key26 = null;
          var val27 = null;
          key26 = input.readString();
          val27 = input.readI32();
          this.nameToTypePtr[key26] = val27;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUnionTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TUnionTypeEntry');
  if (this.nameToTypePtr !== null && this.nameToTypePtr !== undefined) {
    output.writeFieldBegin('nameToTypePtr', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.nameToTypePtr));
    for (var kiter28 in this.nameToTypePtr)
    {
      if (this.nameToTypePtr.hasOwnProperty(kiter28))
      {
        var viter29 = this.nameToTypePtr[kiter28];
        output.writeString(kiter28);
        output.writeI32(viter29);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUserDefinedTypeEntry = module.exports.TUserDefinedTypeEntry = function(args) {
  this.typeClassName = null;
  if (args) {
    if (args.typeClassName !== undefined && args.typeClassName !== null) {
      this.typeClassName = args.typeClassName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeClassName is unset!');
    }
  }
};
TUserDefinedTypeEntry.prototype = {};
TUserDefinedTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.typeClassName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserDefinedTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TUserDefinedTypeEntry');
  if (this.typeClassName !== null && this.typeClassName !== undefined) {
    output.writeFieldBegin('typeClassName', Thrift.Type.STRING, 1);
    output.writeString(this.typeClassName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTypeEntry = module.exports.TTypeEntry = function(args) {
  this.primitiveEntry = null;
  this.arrayEntry = null;
  this.mapEntry = null;
  this.structEntry = null;
  this.unionEntry = null;
  this.userDefinedTypeEntry = null;
  if (args) {
    if (args.primitiveEntry !== undefined && args.primitiveEntry !== null) {
      this.primitiveEntry = new ttypes.TPrimitiveTypeEntry(args.primitiveEntry);
    }
    if (args.arrayEntry !== undefined && args.arrayEntry !== null) {
      this.arrayEntry = new ttypes.TArrayTypeEntry(args.arrayEntry);
    }
    if (args.mapEntry !== undefined && args.mapEntry !== null) {
      this.mapEntry = new ttypes.TMapTypeEntry(args.mapEntry);
    }
    if (args.structEntry !== undefined && args.structEntry !== null) {
      this.structEntry = new ttypes.TStructTypeEntry(args.structEntry);
    }
    if (args.unionEntry !== undefined && args.unionEntry !== null) {
      this.unionEntry = new ttypes.TUnionTypeEntry(args.unionEntry);
    }
    if (args.userDefinedTypeEntry !== undefined && args.userDefinedTypeEntry !== null) {
      this.userDefinedTypeEntry = new ttypes.TUserDefinedTypeEntry(args.userDefinedTypeEntry);
    }
  }
};
TTypeEntry.prototype = {};
TTypeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.primitiveEntry = new ttypes.TPrimitiveTypeEntry();
        this.primitiveEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.arrayEntry = new ttypes.TArrayTypeEntry();
        this.arrayEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapEntry = new ttypes.TMapTypeEntry();
        this.mapEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.structEntry = new ttypes.TStructTypeEntry();
        this.structEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionEntry = new ttypes.TUnionTypeEntry();
        this.unionEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.userDefinedTypeEntry = new ttypes.TUserDefinedTypeEntry();
        this.userDefinedTypeEntry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeEntry.prototype.write = function(output) {
  output.writeStructBegin('TTypeEntry');
  if (this.primitiveEntry !== null && this.primitiveEntry !== undefined) {
    output.writeFieldBegin('primitiveEntry', Thrift.Type.STRUCT, 1);
    this.primitiveEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.arrayEntry !== null && this.arrayEntry !== undefined) {
    output.writeFieldBegin('arrayEntry', Thrift.Type.STRUCT, 2);
    this.arrayEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.mapEntry !== null && this.mapEntry !== undefined) {
    output.writeFieldBegin('mapEntry', Thrift.Type.STRUCT, 3);
    this.mapEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.structEntry !== null && this.structEntry !== undefined) {
    output.writeFieldBegin('structEntry', Thrift.Type.STRUCT, 4);
    this.structEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.unionEntry !== null && this.unionEntry !== undefined) {
    output.writeFieldBegin('unionEntry', Thrift.Type.STRUCT, 5);
    this.unionEntry.write(output);
    output.writeFieldEnd();
  }
  if (this.userDefinedTypeEntry !== null && this.userDefinedTypeEntry !== undefined) {
    output.writeFieldBegin('userDefinedTypeEntry', Thrift.Type.STRUCT, 6);
    this.userDefinedTypeEntry.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTypeDesc = module.exports.TTypeDesc = function(args) {
  this.types = null;
  if (args) {
    if (args.types !== undefined && args.types !== null) {
      this.types = Thrift.copyList(args.types, [ttypes.TTypeEntry]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field types is unset!');
    }
  }
};
TTypeDesc.prototype = {};
TTypeDesc.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.types = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = new ttypes.TTypeEntry();
          elem36.read(input);
          this.types.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTypeDesc.prototype.write = function(output) {
  output.writeStructBegin('TTypeDesc');
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.types.length);
    for (var iter37 in this.types)
    {
      if (this.types.hasOwnProperty(iter37))
      {
        iter37 = this.types[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumnDesc = module.exports.TColumnDesc = function(args) {
  this.columnName = null;
  this.typeDesc = null;
  this.position = null;
  this.comment = null;
  if (args) {
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columnName is unset!');
    }
    if (args.typeDesc !== undefined && args.typeDesc !== null) {
      this.typeDesc = new ttypes.TTypeDesc(args.typeDesc);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeDesc is unset!');
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field position is unset!');
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
TColumnDesc.prototype = {};
TColumnDesc.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.typeDesc = new ttypes.TTypeDesc();
        this.typeDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.position = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnDesc.prototype.write = function(output) {
  output.writeStructBegin('TColumnDesc');
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 1);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.typeDesc !== null && this.typeDesc !== undefined) {
    output.writeFieldBegin('typeDesc', Thrift.Type.STRUCT, 2);
    this.typeDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I32, 3);
    output.writeI32(this.position);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTableSchema = module.exports.TTableSchema = function(args) {
  this.columns = null;
  if (args) {
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumnDesc]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columns is unset!');
    }
  }
};
TTableSchema.prototype = {};
TTableSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.columns = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new ttypes.TColumnDesc();
          elem44.read(input);
          this.columns.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTableSchema.prototype.write = function(output) {
  output.writeStructBegin('TTableSchema');
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter45 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter45))
      {
        iter45 = this.columns[iter45];
        iter45.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TBoolValue = module.exports.TBoolValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TBoolValue.prototype = {};
TBoolValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.value = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBoolValue.prototype.write = function(output) {
  output.writeStructBegin('TBoolValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BOOL, 1);
    output.writeBool(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TByteValue = module.exports.TByteValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TByteValue.prototype = {};
TByteValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.value = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TByteValue.prototype.write = function(output) {
  output.writeStructBegin('TByteValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BYTE, 1);
    output.writeByte(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TI16Value = module.exports.TI16Value = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TI16Value.prototype = {};
TI16Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.value = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI16Value.prototype.write = function(output) {
  output.writeStructBegin('TI16Value');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I16, 1);
    output.writeI16(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TI32Value = module.exports.TI32Value = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TI32Value.prototype = {};
TI32Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI32Value.prototype.write = function(output) {
  output.writeStructBegin('TI32Value');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 1);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TI64Value = module.exports.TI64Value = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TI64Value.prototype = {};
TI64Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI64Value.prototype.write = function(output) {
  output.writeStructBegin('TI64Value');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 1);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDoubleValue = module.exports.TDoubleValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TDoubleValue.prototype = {};
TDoubleValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDoubleValue.prototype.write = function(output) {
  output.writeStructBegin('TDoubleValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStringValue = module.exports.TStringValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TStringValue.prototype = {};
TStringValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringValue.prototype.write = function(output) {
  output.writeStructBegin('TStringValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumnValue = module.exports.TColumnValue = function(args) {
  this.boolVal = null;
  this.byteVal = null;
  this.i16Val = null;
  this.i32Val = null;
  this.i64Val = null;
  this.doubleVal = null;
  this.stringVal = null;
  if (args) {
    if (args.boolVal !== undefined && args.boolVal !== null) {
      this.boolVal = new ttypes.TBoolValue(args.boolVal);
    }
    if (args.byteVal !== undefined && args.byteVal !== null) {
      this.byteVal = new ttypes.TByteValue(args.byteVal);
    }
    if (args.i16Val !== undefined && args.i16Val !== null) {
      this.i16Val = new ttypes.TI16Value(args.i16Val);
    }
    if (args.i32Val !== undefined && args.i32Val !== null) {
      this.i32Val = new ttypes.TI32Value(args.i32Val);
    }
    if (args.i64Val !== undefined && args.i64Val !== null) {
      this.i64Val = new ttypes.TI64Value(args.i64Val);
    }
    if (args.doubleVal !== undefined && args.doubleVal !== null) {
      this.doubleVal = new ttypes.TDoubleValue(args.doubleVal);
    }
    if (args.stringVal !== undefined && args.stringVal !== null) {
      this.stringVal = new ttypes.TStringValue(args.stringVal);
    }
  }
};
TColumnValue.prototype = {};
TColumnValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.boolVal = new ttypes.TBoolValue();
        this.boolVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.byteVal = new ttypes.TByteValue();
        this.byteVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.i16Val = new ttypes.TI16Value();
        this.i16Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.i32Val = new ttypes.TI32Value();
        this.i32Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.i64Val = new ttypes.TI64Value();
        this.i64Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.doubleVal = new ttypes.TDoubleValue();
        this.doubleVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringVal = new ttypes.TStringValue();
        this.stringVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumnValue.prototype.write = function(output) {
  output.writeStructBegin('TColumnValue');
  if (this.boolVal !== null && this.boolVal !== undefined) {
    output.writeFieldBegin('boolVal', Thrift.Type.STRUCT, 1);
    this.boolVal.write(output);
    output.writeFieldEnd();
  }
  if (this.byteVal !== null && this.byteVal !== undefined) {
    output.writeFieldBegin('byteVal', Thrift.Type.STRUCT, 2);
    this.byteVal.write(output);
    output.writeFieldEnd();
  }
  if (this.i16Val !== null && this.i16Val !== undefined) {
    output.writeFieldBegin('i16Val', Thrift.Type.STRUCT, 3);
    this.i16Val.write(output);
    output.writeFieldEnd();
  }
  if (this.i32Val !== null && this.i32Val !== undefined) {
    output.writeFieldBegin('i32Val', Thrift.Type.STRUCT, 4);
    this.i32Val.write(output);
    output.writeFieldEnd();
  }
  if (this.i64Val !== null && this.i64Val !== undefined) {
    output.writeFieldBegin('i64Val', Thrift.Type.STRUCT, 5);
    this.i64Val.write(output);
    output.writeFieldEnd();
  }
  if (this.doubleVal !== null && this.doubleVal !== undefined) {
    output.writeFieldBegin('doubleVal', Thrift.Type.STRUCT, 6);
    this.doubleVal.write(output);
    output.writeFieldEnd();
  }
  if (this.stringVal !== null && this.stringVal !== undefined) {
    output.writeFieldBegin('stringVal', Thrift.Type.STRUCT, 7);
    this.stringVal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRow = module.exports.TRow = function(args) {
  this.colVals = null;
  if (args) {
    if (args.colVals !== undefined && args.colVals !== null) {
      this.colVals = Thrift.copyList(args.colVals, [ttypes.TColumnValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field colVals is unset!');
    }
  }
};
TRow.prototype = {};
TRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.colVals = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new ttypes.TColumnValue();
          elem52.read(input);
          this.colVals.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRow.prototype.write = function(output) {
  output.writeStructBegin('TRow');
  if (this.colVals !== null && this.colVals !== undefined) {
    output.writeFieldBegin('colVals', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.colVals.length);
    for (var iter53 in this.colVals)
    {
      if (this.colVals.hasOwnProperty(iter53))
      {
        iter53 = this.colVals[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TBoolColumn = module.exports.TBoolColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TBoolColumn.prototype = {};
TBoolColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.values = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = input.readBool();
          this.values.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBoolColumn.prototype.write = function(output) {
  output.writeStructBegin('TBoolColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BOOL, this.values.length);
    for (var iter61 in this.values)
    {
      if (this.values.hasOwnProperty(iter61))
      {
        iter61 = this.values[iter61];
        output.writeBool(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TByteColumn = module.exports.TByteColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TByteColumn.prototype = {};
TByteColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.values = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = input.readByte();
          this.values.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TByteColumn.prototype.write = function(output) {
  output.writeStructBegin('TByteColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BYTE, this.values.length);
    for (var iter69 in this.values)
    {
      if (this.values.hasOwnProperty(iter69))
      {
        iter69 = this.values[iter69];
        output.writeByte(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TI16Column = module.exports.TI16Column = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TI16Column.prototype = {};
TI16Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.values = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readI16();
          this.values.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI16Column.prototype.write = function(output) {
  output.writeStructBegin('TI16Column');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I16, this.values.length);
    for (var iter77 in this.values)
    {
      if (this.values.hasOwnProperty(iter77))
      {
        iter77 = this.values[iter77];
        output.writeI16(iter77);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TI32Column = module.exports.TI32Column = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TI32Column.prototype = {};
TI32Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.values = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = input.readI32();
          this.values.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI32Column.prototype.write = function(output) {
  output.writeStructBegin('TI32Column');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.values.length);
    for (var iter85 in this.values)
    {
      if (this.values.hasOwnProperty(iter85))
      {
        iter85 = this.values[iter85];
        output.writeI32(iter85);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TI64Column = module.exports.TI64Column = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TI64Column.prototype = {};
TI64Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size86 = 0;
        var _rtmp390;
        this.values = [];
        var _etype89 = 0;
        _rtmp390 = input.readListBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = input.readI64();
          this.values.push(elem92);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TI64Column.prototype.write = function(output) {
  output.writeStructBegin('TI64Column');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.values.length);
    for (var iter93 in this.values)
    {
      if (this.values.hasOwnProperty(iter93))
      {
        iter93 = this.values[iter93];
        output.writeI64(iter93);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDoubleColumn = module.exports.TDoubleColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TDoubleColumn.prototype = {};
TDoubleColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.values = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = input.readDouble();
          this.values.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDoubleColumn.prototype.write = function(output) {
  output.writeStructBegin('TDoubleColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.DOUBLE, this.values.length);
    for (var iter101 in this.values)
    {
      if (this.values.hasOwnProperty(iter101))
      {
        iter101 = this.values[iter101];
        output.writeDouble(iter101);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStringColumn = module.exports.TStringColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TStringColumn.prototype = {};
TStringColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.values = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = input.readString();
          this.values.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringColumn.prototype.write = function(output) {
  output.writeStructBegin('TStringColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter109 in this.values)
    {
      if (this.values.hasOwnProperty(iter109))
      {
        iter109 = this.values[iter109];
        output.writeString(iter109);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TBinaryColumn = module.exports.TBinaryColumn = function(args) {
  this.values = null;
  this.nulls = null;
  if (args) {
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field values is unset!');
    }
    if (args.nulls !== undefined && args.nulls !== null) {
      this.nulls = args.nulls;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nulls is unset!');
    }
  }
};
TBinaryColumn.prototype = {};
TBinaryColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.values = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = input.readBinary();
          this.values.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nulls = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TBinaryColumn.prototype.write = function(output) {
  output.writeStructBegin('TBinaryColumn');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter117 in this.values)
    {
      if (this.values.hasOwnProperty(iter117))
      {
        iter117 = this.values[iter117];
        output.writeBinary(iter117);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nulls !== null && this.nulls !== undefined) {
    output.writeFieldBegin('nulls', Thrift.Type.STRING, 2);
    output.writeBinary(this.nulls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TColumn = module.exports.TColumn = function(args) {
  this.boolVal = null;
  this.byteVal = null;
  this.i16Val = null;
  this.i32Val = null;
  this.i64Val = null;
  this.doubleVal = null;
  this.stringVal = null;
  this.binaryVal = null;
  if (args) {
    if (args.boolVal !== undefined && args.boolVal !== null) {
      this.boolVal = new ttypes.TBoolColumn(args.boolVal);
    }
    if (args.byteVal !== undefined && args.byteVal !== null) {
      this.byteVal = new ttypes.TByteColumn(args.byteVal);
    }
    if (args.i16Val !== undefined && args.i16Val !== null) {
      this.i16Val = new ttypes.TI16Column(args.i16Val);
    }
    if (args.i32Val !== undefined && args.i32Val !== null) {
      this.i32Val = new ttypes.TI32Column(args.i32Val);
    }
    if (args.i64Val !== undefined && args.i64Val !== null) {
      this.i64Val = new ttypes.TI64Column(args.i64Val);
    }
    if (args.doubleVal !== undefined && args.doubleVal !== null) {
      this.doubleVal = new ttypes.TDoubleColumn(args.doubleVal);
    }
    if (args.stringVal !== undefined && args.stringVal !== null) {
      this.stringVal = new ttypes.TStringColumn(args.stringVal);
    }
    if (args.binaryVal !== undefined && args.binaryVal !== null) {
      this.binaryVal = new ttypes.TBinaryColumn(args.binaryVal);
    }
  }
};
TColumn.prototype = {};
TColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.boolVal = new ttypes.TBoolColumn();
        this.boolVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.byteVal = new ttypes.TByteColumn();
        this.byteVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.i16Val = new ttypes.TI16Column();
        this.i16Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.i32Val = new ttypes.TI32Column();
        this.i32Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.i64Val = new ttypes.TI64Column();
        this.i64Val.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.doubleVal = new ttypes.TDoubleColumn();
        this.doubleVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringVal = new ttypes.TStringColumn();
        this.stringVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.binaryVal = new ttypes.TBinaryColumn();
        this.binaryVal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TColumn.prototype.write = function(output) {
  output.writeStructBegin('TColumn');
  if (this.boolVal !== null && this.boolVal !== undefined) {
    output.writeFieldBegin('boolVal', Thrift.Type.STRUCT, 1);
    this.boolVal.write(output);
    output.writeFieldEnd();
  }
  if (this.byteVal !== null && this.byteVal !== undefined) {
    output.writeFieldBegin('byteVal', Thrift.Type.STRUCT, 2);
    this.byteVal.write(output);
    output.writeFieldEnd();
  }
  if (this.i16Val !== null && this.i16Val !== undefined) {
    output.writeFieldBegin('i16Val', Thrift.Type.STRUCT, 3);
    this.i16Val.write(output);
    output.writeFieldEnd();
  }
  if (this.i32Val !== null && this.i32Val !== undefined) {
    output.writeFieldBegin('i32Val', Thrift.Type.STRUCT, 4);
    this.i32Val.write(output);
    output.writeFieldEnd();
  }
  if (this.i64Val !== null && this.i64Val !== undefined) {
    output.writeFieldBegin('i64Val', Thrift.Type.STRUCT, 5);
    this.i64Val.write(output);
    output.writeFieldEnd();
  }
  if (this.doubleVal !== null && this.doubleVal !== undefined) {
    output.writeFieldBegin('doubleVal', Thrift.Type.STRUCT, 6);
    this.doubleVal.write(output);
    output.writeFieldEnd();
  }
  if (this.stringVal !== null && this.stringVal !== undefined) {
    output.writeFieldBegin('stringVal', Thrift.Type.STRUCT, 7);
    this.stringVal.write(output);
    output.writeFieldEnd();
  }
  if (this.binaryVal !== null && this.binaryVal !== undefined) {
    output.writeFieldBegin('binaryVal', Thrift.Type.STRUCT, 8);
    this.binaryVal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlJsonArrayFormat = module.exports.TDBSqlJsonArrayFormat = function(args) {
  this.compressionCodec = null;
  if (args) {
    if (args.compressionCodec !== undefined && args.compressionCodec !== null) {
      this.compressionCodec = args.compressionCodec;
    }
  }
};
TDBSqlJsonArrayFormat.prototype = {};
TDBSqlJsonArrayFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.compressionCodec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlJsonArrayFormat.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlJsonArrayFormat');
  if (this.compressionCodec !== null && this.compressionCodec !== undefined) {
    output.writeFieldBegin('compressionCodec', Thrift.Type.I32, 1);
    output.writeI32(this.compressionCodec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlCsvFormat = module.exports.TDBSqlCsvFormat = function(args) {
  this.compressionCodec = null;
  if (args) {
    if (args.compressionCodec !== undefined && args.compressionCodec !== null) {
      this.compressionCodec = args.compressionCodec;
    }
  }
};
TDBSqlCsvFormat.prototype = {};
TDBSqlCsvFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.compressionCodec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlCsvFormat.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlCsvFormat');
  if (this.compressionCodec !== null && this.compressionCodec !== undefined) {
    output.writeFieldBegin('compressionCodec', Thrift.Type.I32, 1);
    output.writeI32(this.compressionCodec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlArrowFormat = module.exports.TDBSqlArrowFormat = function(args) {
  this.arrowLayout = null;
  this.compressionCodec = null;
  if (args) {
    if (args.arrowLayout !== undefined && args.arrowLayout !== null) {
      this.arrowLayout = args.arrowLayout;
    }
    if (args.compressionCodec !== undefined && args.compressionCodec !== null) {
      this.compressionCodec = args.compressionCodec;
    }
  }
};
TDBSqlArrowFormat.prototype = {};
TDBSqlArrowFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.arrowLayout = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.compressionCodec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlArrowFormat.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlArrowFormat');
  if (this.arrowLayout !== null && this.arrowLayout !== undefined) {
    output.writeFieldBegin('arrowLayout', Thrift.Type.I32, 1);
    output.writeI32(this.arrowLayout);
    output.writeFieldEnd();
  }
  if (this.compressionCodec !== null && this.compressionCodec !== undefined) {
    output.writeFieldBegin('compressionCodec', Thrift.Type.I32, 2);
    output.writeI32(this.compressionCodec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlResultFormat = module.exports.TDBSqlResultFormat = function(args) {
  this.arrowFormat = null;
  this.csvFormat = null;
  this.jsonArrayFormat = null;
  if (args) {
    if (args.arrowFormat !== undefined && args.arrowFormat !== null) {
      this.arrowFormat = new ttypes.TDBSqlArrowFormat(args.arrowFormat);
    }
    if (args.csvFormat !== undefined && args.csvFormat !== null) {
      this.csvFormat = new ttypes.TDBSqlCsvFormat(args.csvFormat);
    }
    if (args.jsonArrayFormat !== undefined && args.jsonArrayFormat !== null) {
      this.jsonArrayFormat = new ttypes.TDBSqlJsonArrayFormat(args.jsonArrayFormat);
    }
  }
};
TDBSqlResultFormat.prototype = {};
TDBSqlResultFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.arrowFormat = new ttypes.TDBSqlArrowFormat();
        this.arrowFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.csvFormat = new ttypes.TDBSqlCsvFormat();
        this.csvFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.jsonArrayFormat = new ttypes.TDBSqlJsonArrayFormat();
        this.jsonArrayFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlResultFormat.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlResultFormat');
  if (this.arrowFormat !== null && this.arrowFormat !== undefined) {
    output.writeFieldBegin('arrowFormat', Thrift.Type.STRUCT, 1);
    this.arrowFormat.write(output);
    output.writeFieldEnd();
  }
  if (this.csvFormat !== null && this.csvFormat !== undefined) {
    output.writeFieldBegin('csvFormat', Thrift.Type.STRUCT, 2);
    this.csvFormat.write(output);
    output.writeFieldEnd();
  }
  if (this.jsonArrayFormat !== null && this.jsonArrayFormat !== undefined) {
    output.writeFieldBegin('jsonArrayFormat', Thrift.Type.STRUCT, 3);
    this.jsonArrayFormat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSparkArrowBatch = module.exports.TSparkArrowBatch = function(args) {
  this.batch = null;
  this.rowCount = null;
  if (args) {
    if (args.batch !== undefined && args.batch !== null) {
      this.batch = args.batch;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field batch is unset!');
    }
    if (args.rowCount !== undefined && args.rowCount !== null) {
      this.rowCount = args.rowCount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rowCount is unset!');
    }
  }
};
TSparkArrowBatch.prototype = {};
TSparkArrowBatch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.batch = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkArrowBatch.prototype.write = function(output) {
  output.writeStructBegin('TSparkArrowBatch');
  if (this.batch !== null && this.batch !== undefined) {
    output.writeFieldBegin('batch', Thrift.Type.STRING, 1);
    output.writeBinary(this.batch);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 2);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSparkArrowResultLink = module.exports.TSparkArrowResultLink = function(args) {
  this.fileLink = null;
  this.expiryTime = null;
  this.startRowOffset = null;
  this.rowCount = null;
  this.bytesNum = null;
  this.httpHeaders = null;
  if (args) {
    if (args.fileLink !== undefined && args.fileLink !== null) {
      this.fileLink = args.fileLink;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fileLink is unset!');
    }
    if (args.expiryTime !== undefined && args.expiryTime !== null) {
      this.expiryTime = args.expiryTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expiryTime is unset!');
    }
    if (args.startRowOffset !== undefined && args.startRowOffset !== null) {
      this.startRowOffset = args.startRowOffset;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRowOffset is unset!');
    }
    if (args.rowCount !== undefined && args.rowCount !== null) {
      this.rowCount = args.rowCount;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rowCount is unset!');
    }
    if (args.bytesNum !== undefined && args.bytesNum !== null) {
      this.bytesNum = args.bytesNum;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bytesNum is unset!');
    }
    if (args.httpHeaders !== undefined && args.httpHeaders !== null) {
      this.httpHeaders = Thrift.copyMap(args.httpHeaders, [null]);
    }
  }
};
TSparkArrowResultLink.prototype = {};
TSparkArrowResultLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileLink = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiryTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startRowOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.bytesNum = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size118 = 0;
        var _rtmp3122;
        this.httpHeaders = {};
        var _ktype119 = 0;
        var _vtype120 = 0;
        _rtmp3122 = input.readMapBegin();
        _ktype119 = _rtmp3122.ktype;
        _vtype120 = _rtmp3122.vtype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var key124 = null;
          var val125 = null;
          key124 = input.readString();
          val125 = input.readString();
          this.httpHeaders[key124] = val125;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkArrowResultLink.prototype.write = function(output) {
  output.writeStructBegin('TSparkArrowResultLink');
  if (this.fileLink !== null && this.fileLink !== undefined) {
    output.writeFieldBegin('fileLink', Thrift.Type.STRING, 1);
    output.writeString(this.fileLink);
    output.writeFieldEnd();
  }
  if (this.expiryTime !== null && this.expiryTime !== undefined) {
    output.writeFieldBegin('expiryTime', Thrift.Type.I64, 2);
    output.writeI64(this.expiryTime);
    output.writeFieldEnd();
  }
  if (this.startRowOffset !== null && this.startRowOffset !== undefined) {
    output.writeFieldBegin('startRowOffset', Thrift.Type.I64, 3);
    output.writeI64(this.startRowOffset);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 4);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  if (this.bytesNum !== null && this.bytesNum !== undefined) {
    output.writeFieldBegin('bytesNum', Thrift.Type.I64, 5);
    output.writeI64(this.bytesNum);
    output.writeFieldEnd();
  }
  if (this.httpHeaders !== null && this.httpHeaders !== undefined) {
    output.writeFieldBegin('httpHeaders', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.httpHeaders));
    for (var kiter126 in this.httpHeaders)
    {
      if (this.httpHeaders.hasOwnProperty(kiter126))
      {
        var viter127 = this.httpHeaders[kiter126];
        output.writeString(kiter126);
        output.writeString(viter127);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlCloudResultFile = module.exports.TDBSqlCloudResultFile = function(args) {
  this.filePath = null;
  this.startRowOffset = null;
  this.rowCount = null;
  this.uncompressedBytes = null;
  this.compressedBytes = null;
  this.fileLink = null;
  this.linkExpiryTime = null;
  this.httpHeaders = null;
  if (args) {
    if (args.filePath !== undefined && args.filePath !== null) {
      this.filePath = args.filePath;
    }
    if (args.startRowOffset !== undefined && args.startRowOffset !== null) {
      this.startRowOffset = args.startRowOffset;
    }
    if (args.rowCount !== undefined && args.rowCount !== null) {
      this.rowCount = args.rowCount;
    }
    if (args.uncompressedBytes !== undefined && args.uncompressedBytes !== null) {
      this.uncompressedBytes = args.uncompressedBytes;
    }
    if (args.compressedBytes !== undefined && args.compressedBytes !== null) {
      this.compressedBytes = args.compressedBytes;
    }
    if (args.fileLink !== undefined && args.fileLink !== null) {
      this.fileLink = args.fileLink;
    }
    if (args.linkExpiryTime !== undefined && args.linkExpiryTime !== null) {
      this.linkExpiryTime = args.linkExpiryTime;
    }
    if (args.httpHeaders !== undefined && args.httpHeaders !== null) {
      this.httpHeaders = Thrift.copyMap(args.httpHeaders, [null]);
    }
  }
};
TDBSqlCloudResultFile.prototype = {};
TDBSqlCloudResultFile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startRowOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.uncompressedBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.compressedBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.fileLink = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.linkExpiryTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size128 = 0;
        var _rtmp3132;
        this.httpHeaders = {};
        var _ktype129 = 0;
        var _vtype130 = 0;
        _rtmp3132 = input.readMapBegin();
        _ktype129 = _rtmp3132.ktype;
        _vtype130 = _rtmp3132.vtype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var key134 = null;
          var val135 = null;
          key134 = input.readString();
          val135 = input.readString();
          this.httpHeaders[key134] = val135;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlCloudResultFile.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlCloudResultFile');
  if (this.filePath !== null && this.filePath !== undefined) {
    output.writeFieldBegin('filePath', Thrift.Type.STRING, 1);
    output.writeString(this.filePath);
    output.writeFieldEnd();
  }
  if (this.startRowOffset !== null && this.startRowOffset !== undefined) {
    output.writeFieldBegin('startRowOffset', Thrift.Type.I64, 2);
    output.writeI64(this.startRowOffset);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 3);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  if (this.uncompressedBytes !== null && this.uncompressedBytes !== undefined) {
    output.writeFieldBegin('uncompressedBytes', Thrift.Type.I64, 4);
    output.writeI64(this.uncompressedBytes);
    output.writeFieldEnd();
  }
  if (this.compressedBytes !== null && this.compressedBytes !== undefined) {
    output.writeFieldBegin('compressedBytes', Thrift.Type.I64, 5);
    output.writeI64(this.compressedBytes);
    output.writeFieldEnd();
  }
  if (this.fileLink !== null && this.fileLink !== undefined) {
    output.writeFieldBegin('fileLink', Thrift.Type.STRING, 6);
    output.writeString(this.fileLink);
    output.writeFieldEnd();
  }
  if (this.linkExpiryTime !== null && this.linkExpiryTime !== undefined) {
    output.writeFieldBegin('linkExpiryTime', Thrift.Type.I64, 7);
    output.writeI64(this.linkExpiryTime);
    output.writeFieldEnd();
  }
  if (this.httpHeaders !== null && this.httpHeaders !== undefined) {
    output.writeFieldBegin('httpHeaders', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.httpHeaders));
    for (var kiter136 in this.httpHeaders)
    {
      if (this.httpHeaders.hasOwnProperty(kiter136))
      {
        var viter137 = this.httpHeaders[kiter136];
        output.writeString(kiter136);
        output.writeString(viter137);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRowSet = module.exports.TRowSet = function(args) {
  this.startRowOffset = null;
  this.rows = null;
  this.columns = null;
  this.binaryColumns = null;
  this.columnCount = null;
  this.arrowBatches = null;
  this.resultLinks = null;
  this.cloudFetchResults = null;
  if (args) {
    if (args.startRowOffset !== undefined && args.startRowOffset !== null) {
      this.startRowOffset = args.startRowOffset;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startRowOffset is unset!');
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [ttypes.TRow]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rows is unset!');
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ttypes.TColumn]);
    }
    if (args.binaryColumns !== undefined && args.binaryColumns !== null) {
      this.binaryColumns = args.binaryColumns;
    }
    if (args.columnCount !== undefined && args.columnCount !== null) {
      this.columnCount = args.columnCount;
    }
    if (args.arrowBatches !== undefined && args.arrowBatches !== null) {
      this.arrowBatches = Thrift.copyList(args.arrowBatches, [ttypes.TSparkArrowBatch]);
    }
    if (args.resultLinks !== undefined && args.resultLinks !== null) {
      this.resultLinks = Thrift.copyList(args.resultLinks, [ttypes.TSparkArrowResultLink]);
    }
    if (args.cloudFetchResults !== undefined && args.cloudFetchResults !== null) {
      this.cloudFetchResults = Thrift.copyList(args.cloudFetchResults, [ttypes.TDBSqlCloudResultFile]);
    }
  }
};
TRowSet.prototype = {};
TRowSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startRowOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.rows = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = new ttypes.TRow();
          elem144.read(input);
          this.rows.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size145 = 0;
        var _rtmp3149;
        this.columns = [];
        var _etype148 = 0;
        _rtmp3149 = input.readListBegin();
        _etype148 = _rtmp3149.etype;
        _size145 = _rtmp3149.size;
        for (var _i150 = 0; _i150 < _size145; ++_i150)
        {
          var elem151 = null;
          elem151 = new ttypes.TColumn();
          elem151.read(input);
          this.columns.push(elem151);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.binaryColumns = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.columnCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.arrowBatches = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new ttypes.TSparkArrowBatch();
          elem158.read(input);
          this.arrowBatches.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.LIST) {
        var _size159 = 0;
        var _rtmp3163;
        this.resultLinks = [];
        var _etype162 = 0;
        _rtmp3163 = input.readListBegin();
        _etype162 = _rtmp3163.etype;
        _size159 = _rtmp3163.size;
        for (var _i164 = 0; _i164 < _size159; ++_i164)
        {
          var elem165 = null;
          elem165 = new ttypes.TSparkArrowResultLink();
          elem165.read(input);
          this.resultLinks.push(elem165);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.LIST) {
        var _size166 = 0;
        var _rtmp3170;
        this.cloudFetchResults = [];
        var _etype169 = 0;
        _rtmp3170 = input.readListBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = new ttypes.TDBSqlCloudResultFile();
          elem172.read(input);
          this.cloudFetchResults.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRowSet.prototype.write = function(output) {
  output.writeStructBegin('TRowSet');
  if (this.startRowOffset !== null && this.startRowOffset !== undefined) {
    output.writeFieldBegin('startRowOffset', Thrift.Type.I64, 1);
    output.writeI64(this.startRowOffset);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rows.length);
    for (var iter173 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter173))
      {
        iter173 = this.rows[iter173];
        iter173.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter174 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter174))
      {
        iter174 = this.columns[iter174];
        iter174.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.binaryColumns !== null && this.binaryColumns !== undefined) {
    output.writeFieldBegin('binaryColumns', Thrift.Type.STRING, 4);
    output.writeBinary(this.binaryColumns);
    output.writeFieldEnd();
  }
  if (this.columnCount !== null && this.columnCount !== undefined) {
    output.writeFieldBegin('columnCount', Thrift.Type.I32, 5);
    output.writeI32(this.columnCount);
    output.writeFieldEnd();
  }
  if (this.arrowBatches !== null && this.arrowBatches !== undefined) {
    output.writeFieldBegin('arrowBatches', Thrift.Type.LIST, 1281);
    output.writeListBegin(Thrift.Type.STRUCT, this.arrowBatches.length);
    for (var iter175 in this.arrowBatches)
    {
      if (this.arrowBatches.hasOwnProperty(iter175))
      {
        iter175 = this.arrowBatches[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resultLinks !== null && this.resultLinks !== undefined) {
    output.writeFieldBegin('resultLinks', Thrift.Type.LIST, 1282);
    output.writeListBegin(Thrift.Type.STRUCT, this.resultLinks.length);
    for (var iter176 in this.resultLinks)
    {
      if (this.resultLinks.hasOwnProperty(iter176))
      {
        iter176 = this.resultLinks[iter176];
        iter176.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cloudFetchResults !== null && this.cloudFetchResults !== undefined) {
    output.writeFieldBegin('cloudFetchResults', Thrift.Type.LIST, 3329);
    output.writeListBegin(Thrift.Type.STRUCT, this.cloudFetchResults.length);
    for (var iter177 in this.cloudFetchResults)
    {
      if (this.cloudFetchResults.hasOwnProperty(iter177))
      {
        iter177 = this.cloudFetchResults[iter177];
        iter177.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlTempView = module.exports.TDBSqlTempView = function(args) {
  this.name = null;
  this.sqlStatement = null;
  this.properties = null;
  this.viewSchema = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.sqlStatement !== undefined && args.sqlStatement !== null) {
      this.sqlStatement = args.sqlStatement;
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = Thrift.copyMap(args.properties, [null]);
    }
    if (args.viewSchema !== undefined && args.viewSchema !== null) {
      this.viewSchema = args.viewSchema;
    }
  }
};
TDBSqlTempView.prototype = {};
TDBSqlTempView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sqlStatement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size178 = 0;
        var _rtmp3182;
        this.properties = {};
        var _ktype179 = 0;
        var _vtype180 = 0;
        _rtmp3182 = input.readMapBegin();
        _ktype179 = _rtmp3182.ktype;
        _vtype180 = _rtmp3182.vtype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var key184 = null;
          var val185 = null;
          key184 = input.readString();
          val185 = input.readString();
          this.properties[key184] = val185;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.viewSchema = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlTempView.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlTempView');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.sqlStatement !== null && this.sqlStatement !== undefined) {
    output.writeFieldBegin('sqlStatement', Thrift.Type.STRING, 2);
    output.writeString(this.sqlStatement);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter186 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter186))
      {
        var viter187 = this.properties[kiter186];
        output.writeString(kiter186);
        output.writeString(viter187);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.viewSchema !== null && this.viewSchema !== undefined) {
    output.writeFieldBegin('viewSchema', Thrift.Type.STRING, 4);
    output.writeString(this.viewSchema);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlSessionCapabilities = module.exports.TDBSqlSessionCapabilities = function(args) {
  this.supportsMultipleCatalogs = null;
  if (args) {
    if (args.supportsMultipleCatalogs !== undefined && args.supportsMultipleCatalogs !== null) {
      this.supportsMultipleCatalogs = args.supportsMultipleCatalogs;
    }
  }
};
TDBSqlSessionCapabilities.prototype = {};
TDBSqlSessionCapabilities.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.supportsMultipleCatalogs = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlSessionCapabilities.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlSessionCapabilities');
  if (this.supportsMultipleCatalogs !== null && this.supportsMultipleCatalogs !== undefined) {
    output.writeFieldBegin('supportsMultipleCatalogs', Thrift.Type.BOOL, 1);
    output.writeBool(this.supportsMultipleCatalogs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TExpressionInfo = module.exports.TExpressionInfo = function(args) {
  this.className = null;
  this.usage = null;
  this.name = null;
  this.extended = null;
  this.db = null;
  this.arguments = null;
  this.examples = null;
  this.note = null;
  this.group = null;
  this.since = null;
  this.deprecated = null;
  this.source = null;
  if (args) {
    if (args.className !== undefined && args.className !== null) {
      this.className = args.className;
    }
    if (args.usage !== undefined && args.usage !== null) {
      this.usage = args.usage;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.extended !== undefined && args.extended !== null) {
      this.extended = args.extended;
    }
    if (args.db !== undefined && args.db !== null) {
      this.db = args.db;
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = args.arguments;
    }
    if (args.examples !== undefined && args.examples !== null) {
      this.examples = args.examples;
    }
    if (args.note !== undefined && args.note !== null) {
      this.note = args.note;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.since !== undefined && args.since !== null) {
      this.since = args.since;
    }
    if (args.deprecated !== undefined && args.deprecated !== null) {
      this.deprecated = args.deprecated;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
  }
};
TExpressionInfo.prototype = {};
TExpressionInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.usage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.extended = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.db = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.arguments = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.examples = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.note = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.since = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.deprecated = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExpressionInfo.prototype.write = function(output) {
  output.writeStructBegin('TExpressionInfo');
  if (this.className !== null && this.className !== undefined) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 1);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.usage !== null && this.usage !== undefined) {
    output.writeFieldBegin('usage', Thrift.Type.STRING, 2);
    output.writeString(this.usage);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.extended !== null && this.extended !== undefined) {
    output.writeFieldBegin('extended', Thrift.Type.STRING, 4);
    output.writeString(this.extended);
    output.writeFieldEnd();
  }
  if (this.db !== null && this.db !== undefined) {
    output.writeFieldBegin('db', Thrift.Type.STRING, 5);
    output.writeString(this.db);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.STRING, 6);
    output.writeString(this.arguments);
    output.writeFieldEnd();
  }
  if (this.examples !== null && this.examples !== undefined) {
    output.writeFieldBegin('examples', Thrift.Type.STRING, 7);
    output.writeString(this.examples);
    output.writeFieldEnd();
  }
  if (this.note !== null && this.note !== undefined) {
    output.writeFieldBegin('note', Thrift.Type.STRING, 8);
    output.writeString(this.note);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 9);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.since !== null && this.since !== undefined) {
    output.writeFieldBegin('since', Thrift.Type.STRING, 10);
    output.writeString(this.since);
    output.writeFieldEnd();
  }
  if (this.deprecated !== null && this.deprecated !== undefined) {
    output.writeFieldBegin('deprecated', Thrift.Type.STRING, 11);
    output.writeString(this.deprecated);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 12);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlConfValue = module.exports.TDBSqlConfValue = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TDBSqlConfValue.prototype = {};
TDBSqlConfValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlConfValue.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlConfValue');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlSessionConf = module.exports.TDBSqlSessionConf = function(args) {
  this.confs = null;
  this.tempViews = null;
  this.currentDatabase = null;
  this.currentCatalog = null;
  this.sessionCapabilities = null;
  this.expressionsInfos = null;
  this.internalConfs = null;
  if (args) {
    if (args.confs !== undefined && args.confs !== null) {
      this.confs = Thrift.copyMap(args.confs, [null]);
    }
    if (args.tempViews !== undefined && args.tempViews !== null) {
      this.tempViews = Thrift.copyList(args.tempViews, [ttypes.TDBSqlTempView]);
    }
    if (args.currentDatabase !== undefined && args.currentDatabase !== null) {
      this.currentDatabase = args.currentDatabase;
    }
    if (args.currentCatalog !== undefined && args.currentCatalog !== null) {
      this.currentCatalog = args.currentCatalog;
    }
    if (args.sessionCapabilities !== undefined && args.sessionCapabilities !== null) {
      this.sessionCapabilities = new ttypes.TDBSqlSessionCapabilities(args.sessionCapabilities);
    }
    if (args.expressionsInfos !== undefined && args.expressionsInfos !== null) {
      this.expressionsInfos = Thrift.copyList(args.expressionsInfos, [ttypes.TExpressionInfo]);
    }
    if (args.internalConfs !== undefined && args.internalConfs !== null) {
      this.internalConfs = Thrift.copyMap(args.internalConfs, [ttypes.TDBSqlConfValue]);
    }
  }
};
TDBSqlSessionConf.prototype = {};
TDBSqlSessionConf.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size188 = 0;
        var _rtmp3192;
        this.confs = {};
        var _ktype189 = 0;
        var _vtype190 = 0;
        _rtmp3192 = input.readMapBegin();
        _ktype189 = _rtmp3192.ktype;
        _vtype190 = _rtmp3192.vtype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var key194 = null;
          var val195 = null;
          key194 = input.readString();
          val195 = input.readString();
          this.confs[key194] = val195;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.tempViews = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new ttypes.TDBSqlTempView();
          elem202.read(input);
          this.tempViews.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.currentDatabase = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.currentCatalog = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionCapabilities = new ttypes.TDBSqlSessionCapabilities();
        this.sessionCapabilities.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size203 = 0;
        var _rtmp3207;
        this.expressionsInfos = [];
        var _etype206 = 0;
        _rtmp3207 = input.readListBegin();
        _etype206 = _rtmp3207.etype;
        _size203 = _rtmp3207.size;
        for (var _i208 = 0; _i208 < _size203; ++_i208)
        {
          var elem209 = null;
          elem209 = new ttypes.TExpressionInfo();
          elem209.read(input);
          this.expressionsInfos.push(elem209);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size210 = 0;
        var _rtmp3214;
        this.internalConfs = {};
        var _ktype211 = 0;
        var _vtype212 = 0;
        _rtmp3214 = input.readMapBegin();
        _ktype211 = _rtmp3214.ktype;
        _vtype212 = _rtmp3214.vtype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var key216 = null;
          var val217 = null;
          key216 = input.readString();
          val217 = new ttypes.TDBSqlConfValue();
          val217.read(input);
          this.internalConfs[key216] = val217;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlSessionConf.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlSessionConf');
  if (this.confs !== null && this.confs !== undefined) {
    output.writeFieldBegin('confs', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.confs));
    for (var kiter218 in this.confs)
    {
      if (this.confs.hasOwnProperty(kiter218))
      {
        var viter219 = this.confs[kiter218];
        output.writeString(kiter218);
        output.writeString(viter219);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.tempViews !== null && this.tempViews !== undefined) {
    output.writeFieldBegin('tempViews', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tempViews.length);
    for (var iter220 in this.tempViews)
    {
      if (this.tempViews.hasOwnProperty(iter220))
      {
        iter220 = this.tempViews[iter220];
        iter220.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.currentDatabase !== null && this.currentDatabase !== undefined) {
    output.writeFieldBegin('currentDatabase', Thrift.Type.STRING, 3);
    output.writeString(this.currentDatabase);
    output.writeFieldEnd();
  }
  if (this.currentCatalog !== null && this.currentCatalog !== undefined) {
    output.writeFieldBegin('currentCatalog', Thrift.Type.STRING, 4);
    output.writeString(this.currentCatalog);
    output.writeFieldEnd();
  }
  if (this.sessionCapabilities !== null && this.sessionCapabilities !== undefined) {
    output.writeFieldBegin('sessionCapabilities', Thrift.Type.STRUCT, 5);
    this.sessionCapabilities.write(output);
    output.writeFieldEnd();
  }
  if (this.expressionsInfos !== null && this.expressionsInfos !== undefined) {
    output.writeFieldBegin('expressionsInfos', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.expressionsInfos.length);
    for (var iter221 in this.expressionsInfos)
    {
      if (this.expressionsInfos.hasOwnProperty(iter221))
      {
        iter221 = this.expressionsInfos[iter221];
        iter221.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.internalConfs !== null && this.internalConfs !== undefined) {
    output.writeFieldBegin('internalConfs', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.internalConfs));
    for (var kiter222 in this.internalConfs)
    {
      if (this.internalConfs.hasOwnProperty(kiter222))
      {
        var viter223 = this.internalConfs[kiter222];
        output.writeString(kiter222);
        viter223.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStatus = module.exports.TStatus = function(args) {
  this.statusCode = null;
  this.infoMessages = null;
  this.sqlState = null;
  this.errorCode = null;
  this.errorMessage = null;
  this.displayMessage = null;
  this.errorDetailsJson = null;
  this.responseValidation = null;
  if (args) {
    if (args.statusCode !== undefined && args.statusCode !== null) {
      this.statusCode = args.statusCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statusCode is unset!');
    }
    if (args.infoMessages !== undefined && args.infoMessages !== null) {
      this.infoMessages = Thrift.copyList(args.infoMessages, [null]);
    }
    if (args.sqlState !== undefined && args.sqlState !== null) {
      this.sqlState = args.sqlState;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMessage !== undefined && args.errorMessage !== null) {
      this.errorMessage = args.errorMessage;
    }
    if (args.displayMessage !== undefined && args.displayMessage !== null) {
      this.displayMessage = args.displayMessage;
    }
    if (args.errorDetailsJson !== undefined && args.errorDetailsJson !== null) {
      this.errorDetailsJson = args.errorDetailsJson;
    }
    if (args.responseValidation !== undefined && args.responseValidation !== null) {
      this.responseValidation = args.responseValidation;
    }
  }
};
TStatus.prototype = {};
TStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.statusCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.infoMessages = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readString();
          this.infoMessages.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sqlState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.displayMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRING) {
        this.errorDetailsJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRING) {
        this.responseValidation = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStatus.prototype.write = function(output) {
  output.writeStructBegin('TStatus');
  if (this.statusCode !== null && this.statusCode !== undefined) {
    output.writeFieldBegin('statusCode', Thrift.Type.I32, 1);
    output.writeI32(this.statusCode);
    output.writeFieldEnd();
  }
  if (this.infoMessages !== null && this.infoMessages !== undefined) {
    output.writeFieldBegin('infoMessages', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.infoMessages.length);
    for (var iter231 in this.infoMessages)
    {
      if (this.infoMessages.hasOwnProperty(iter231))
      {
        iter231 = this.infoMessages[iter231];
        output.writeString(iter231);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sqlState !== null && this.sqlState !== undefined) {
    output.writeFieldBegin('sqlState', Thrift.Type.STRING, 3);
    output.writeString(this.sqlState);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 4);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 5);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  if (this.displayMessage !== null && this.displayMessage !== undefined) {
    output.writeFieldBegin('displayMessage', Thrift.Type.STRING, 6);
    output.writeString(this.displayMessage);
    output.writeFieldEnd();
  }
  if (this.errorDetailsJson !== null && this.errorDetailsJson !== undefined) {
    output.writeFieldBegin('errorDetailsJson', Thrift.Type.STRING, 1281);
    output.writeString(this.errorDetailsJson);
    output.writeFieldEnd();
  }
  if (this.responseValidation !== null && this.responseValidation !== undefined) {
    output.writeFieldBegin('responseValidation', Thrift.Type.STRING, 3329);
    output.writeBinary(this.responseValidation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TNamespace = module.exports.TNamespace = function(args) {
  this.catalogName = null;
  this.schemaName = null;
  if (args) {
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
  }
};
TNamespace.prototype = {};
TNamespace.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TNamespace.prototype.write = function(output) {
  output.writeStructBegin('TNamespace');
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 1);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 2);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THandleIdentifier = module.exports.THandleIdentifier = function(args) {
  this.guid = null;
  this.secret = null;
  this.executionVersion = null;
  if (args) {
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field guid is unset!');
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field secret is unset!');
    }
    if (args.executionVersion !== undefined && args.executionVersion !== null) {
      this.executionVersion = args.executionVersion;
    }
  }
};
THandleIdentifier.prototype = {};
THandleIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.guid = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.I16) {
        this.executionVersion = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THandleIdentifier.prototype.write = function(output) {
  output.writeStructBegin('THandleIdentifier');
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.STRING, 1);
    output.writeBinary(this.guid);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 2);
    output.writeBinary(this.secret);
    output.writeFieldEnd();
  }
  if (this.executionVersion !== null && this.executionVersion !== undefined) {
    output.writeFieldBegin('executionVersion', Thrift.Type.I16, 3329);
    output.writeI16(this.executionVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSessionHandle = module.exports.TSessionHandle = function(args) {
  this.sessionId = null;
  this.serverProtocolVersion = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new ttypes.THandleIdentifier(args.sessionId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionId is unset!');
    }
    if (args.serverProtocolVersion !== undefined && args.serverProtocolVersion !== null) {
      this.serverProtocolVersion = args.serverProtocolVersion;
    }
  }
};
TSessionHandle.prototype = {};
TSessionHandle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new ttypes.THandleIdentifier();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.I32) {
        this.serverProtocolVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSessionHandle.prototype.write = function(output) {
  output.writeStructBegin('TSessionHandle');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.serverProtocolVersion !== null && this.serverProtocolVersion !== undefined) {
    output.writeFieldBegin('serverProtocolVersion', Thrift.Type.I32, 3329);
    output.writeI32(this.serverProtocolVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TOperationHandle = module.exports.TOperationHandle = function(args) {
  this.operationId = null;
  this.operationType = null;
  this.hasResultSet = null;
  this.modifiedRowCount = null;
  if (args) {
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationId is unset!');
    }
    if (args.operationType !== undefined && args.operationType !== null) {
      this.operationType = args.operationType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationType is unset!');
    }
    if (args.hasResultSet !== undefined && args.hasResultSet !== null) {
      this.hasResultSet = args.hasResultSet;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasResultSet is unset!');
    }
    if (args.modifiedRowCount !== undefined && args.modifiedRowCount !== null) {
      this.modifiedRowCount = args.modifiedRowCount;
    }
  }
};
TOperationHandle.prototype = {};
TOperationHandle.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.hasResultSet = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.modifiedRowCount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOperationHandle.prototype.write = function(output) {
  output.writeStructBegin('TOperationHandle');
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 1);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.operationType !== null && this.operationType !== undefined) {
    output.writeFieldBegin('operationType', Thrift.Type.I32, 2);
    output.writeI32(this.operationType);
    output.writeFieldEnd();
  }
  if (this.hasResultSet !== null && this.hasResultSet !== undefined) {
    output.writeFieldBegin('hasResultSet', Thrift.Type.BOOL, 3);
    output.writeBool(this.hasResultSet);
    output.writeFieldEnd();
  }
  if (this.modifiedRowCount !== null && this.modifiedRowCount !== undefined) {
    output.writeFieldBegin('modifiedRowCount', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.modifiedRowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TOpenSessionReq = module.exports.TOpenSessionReq = function(args) {
  this.client_protocol = -7;
  this.username = null;
  this.password = null;
  this.configuration = null;
  this.getInfos = null;
  this.client_protocol_i64 = null;
  this.connectionProperties = null;
  this.initialNamespace = null;
  this.canUseMultipleCatalogs = null;
  this.sessionId = null;
  if (args) {
    if (args.client_protocol !== undefined && args.client_protocol !== null) {
      this.client_protocol = args.client_protocol;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
    if (args.getInfos !== undefined && args.getInfos !== null) {
      this.getInfos = Thrift.copyList(args.getInfos, [null]);
    }
    if (args.client_protocol_i64 !== undefined && args.client_protocol_i64 !== null) {
      this.client_protocol_i64 = args.client_protocol_i64;
    }
    if (args.connectionProperties !== undefined && args.connectionProperties !== null) {
      this.connectionProperties = Thrift.copyMap(args.connectionProperties, [null]);
    }
    if (args.initialNamespace !== undefined && args.initialNamespace !== null) {
      this.initialNamespace = new ttypes.TNamespace(args.initialNamespace);
    }
    if (args.canUseMultipleCatalogs !== undefined && args.canUseMultipleCatalogs !== null) {
      this.canUseMultipleCatalogs = args.canUseMultipleCatalogs;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new ttypes.THandleIdentifier(args.sessionId);
    }
  }
};
TOpenSessionReq.prototype = {};
TOpenSessionReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.client_protocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size232 = 0;
        var _rtmp3236;
        this.configuration = {};
        var _ktype233 = 0;
        var _vtype234 = 0;
        _rtmp3236 = input.readMapBegin();
        _ktype233 = _rtmp3236.ktype;
        _vtype234 = _rtmp3236.vtype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var key238 = null;
          var val239 = null;
          key238 = input.readString();
          val239 = input.readString();
          this.configuration[key238] = val239;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.getInfos = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = input.readI32();
          this.getInfos.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.I64) {
        this.client_protocol_i64 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.MAP) {
        var _size247 = 0;
        var _rtmp3251;
        this.connectionProperties = {};
        var _ktype248 = 0;
        var _vtype249 = 0;
        _rtmp3251 = input.readMapBegin();
        _ktype248 = _rtmp3251.ktype;
        _vtype249 = _rtmp3251.vtype;
        _size247 = _rtmp3251.size;
        for (var _i252 = 0; _i252 < _size247; ++_i252)
        {
          var key253 = null;
          var val254 = null;
          key253 = input.readString();
          val254 = input.readString();
          this.connectionProperties[key253] = val254;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1284:
      if (ftype == Thrift.Type.STRUCT) {
        this.initialNamespace = new ttypes.TNamespace();
        this.initialNamespace.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1285:
      if (ftype == Thrift.Type.BOOL) {
        this.canUseMultipleCatalogs = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new ttypes.THandleIdentifier();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOpenSessionReq.prototype.write = function(output) {
  output.writeStructBegin('TOpenSessionReq');
  if (this.client_protocol !== null && this.client_protocol !== undefined) {
    output.writeFieldBegin('client_protocol', Thrift.Type.I32, 1);
    output.writeI32(this.client_protocol);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter255 in this.configuration)
    {
      if (this.configuration.hasOwnProperty(kiter255))
      {
        var viter256 = this.configuration[kiter255];
        output.writeString(kiter255);
        output.writeString(viter256);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.getInfos !== null && this.getInfos !== undefined) {
    output.writeFieldBegin('getInfos', Thrift.Type.LIST, 1281);
    output.writeListBegin(Thrift.Type.I32, this.getInfos.length);
    for (var iter257 in this.getInfos)
    {
      if (this.getInfos.hasOwnProperty(iter257))
      {
        iter257 = this.getInfos[iter257];
        output.writeI32(iter257);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.client_protocol_i64 !== null && this.client_protocol_i64 !== undefined) {
    output.writeFieldBegin('client_protocol_i64', Thrift.Type.I64, 1282);
    output.writeI64(this.client_protocol_i64);
    output.writeFieldEnd();
  }
  if (this.connectionProperties !== null && this.connectionProperties !== undefined) {
    output.writeFieldBegin('connectionProperties', Thrift.Type.MAP, 1283);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.connectionProperties));
    for (var kiter258 in this.connectionProperties)
    {
      if (this.connectionProperties.hasOwnProperty(kiter258))
      {
        var viter259 = this.connectionProperties[kiter258];
        output.writeString(kiter258);
        output.writeString(viter259);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.initialNamespace !== null && this.initialNamespace !== undefined) {
    output.writeFieldBegin('initialNamespace', Thrift.Type.STRUCT, 1284);
    this.initialNamespace.write(output);
    output.writeFieldEnd();
  }
  if (this.canUseMultipleCatalogs !== null && this.canUseMultipleCatalogs !== undefined) {
    output.writeFieldBegin('canUseMultipleCatalogs', Thrift.Type.BOOL, 1285);
    output.writeBool(this.canUseMultipleCatalogs);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 3329);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TOpenSessionResp = module.exports.TOpenSessionResp = function(args) {
  this.status = null;
  this.serverProtocolVersion = null;
  this.sessionHandle = null;
  this.configuration = null;
  this.initialNamespace = null;
  this.canUseMultipleCatalogs = null;
  this.getInfos = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.serverProtocolVersion !== undefined && args.serverProtocolVersion !== null) {
      this.serverProtocolVersion = args.serverProtocolVersion;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field serverProtocolVersion is unset!');
    }
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    }
    if (args.configuration !== undefined && args.configuration !== null) {
      this.configuration = Thrift.copyMap(args.configuration, [null]);
    }
    if (args.initialNamespace !== undefined && args.initialNamespace !== null) {
      this.initialNamespace = new ttypes.TNamespace(args.initialNamespace);
    }
    if (args.canUseMultipleCatalogs !== undefined && args.canUseMultipleCatalogs !== null) {
      this.canUseMultipleCatalogs = args.canUseMultipleCatalogs;
    }
    if (args.getInfos !== undefined && args.getInfos !== null) {
      this.getInfos = Thrift.copyList(args.getInfos, [null]);
    }
  }
};
TOpenSessionResp.prototype = {};
TOpenSessionResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.serverProtocolVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size260 = 0;
        var _rtmp3264;
        this.configuration = {};
        var _ktype261 = 0;
        var _vtype262 = 0;
        _rtmp3264 = input.readMapBegin();
        _ktype261 = _rtmp3264.ktype;
        _vtype262 = _rtmp3264.vtype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var key266 = null;
          var val267 = null;
          key266 = input.readString();
          val267 = input.readString();
          this.configuration[key266] = val267;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1284:
      if (ftype == Thrift.Type.STRUCT) {
        this.initialNamespace = new ttypes.TNamespace();
        this.initialNamespace.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1285:
      if (ftype == Thrift.Type.BOOL) {
        this.canUseMultipleCatalogs = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.LIST) {
        var _size268 = 0;
        var _rtmp3272;
        this.getInfos = [];
        var _etype271 = 0;
        _rtmp3272 = input.readListBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = new ttypes.TGetInfoValue();
          elem274.read(input);
          this.getInfos.push(elem274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TOpenSessionResp.prototype.write = function(output) {
  output.writeStructBegin('TOpenSessionResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.serverProtocolVersion !== null && this.serverProtocolVersion !== undefined) {
    output.writeFieldBegin('serverProtocolVersion', Thrift.Type.I32, 2);
    output.writeI32(this.serverProtocolVersion);
    output.writeFieldEnd();
  }
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 3);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.configuration !== null && this.configuration !== undefined) {
    output.writeFieldBegin('configuration', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configuration));
    for (var kiter275 in this.configuration)
    {
      if (this.configuration.hasOwnProperty(kiter275))
      {
        var viter276 = this.configuration[kiter275];
        output.writeString(kiter275);
        output.writeString(viter276);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.initialNamespace !== null && this.initialNamespace !== undefined) {
    output.writeFieldBegin('initialNamespace', Thrift.Type.STRUCT, 1284);
    this.initialNamespace.write(output);
    output.writeFieldEnd();
  }
  if (this.canUseMultipleCatalogs !== null && this.canUseMultipleCatalogs !== undefined) {
    output.writeFieldBegin('canUseMultipleCatalogs', Thrift.Type.BOOL, 1285);
    output.writeBool(this.canUseMultipleCatalogs);
    output.writeFieldEnd();
  }
  if (this.getInfos !== null && this.getInfos !== undefined) {
    output.writeFieldBegin('getInfos', Thrift.Type.LIST, 1281);
    output.writeListBegin(Thrift.Type.STRUCT, this.getInfos.length);
    for (var iter277 in this.getInfos)
    {
      if (this.getInfos.hasOwnProperty(iter277))
      {
        iter277 = this.getInfos[iter277];
        iter277.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCloseSessionReq = module.exports.TCloseSessionReq = function(args) {
  this.sessionHandle = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
  }
};
TCloseSessionReq.prototype = {};
TCloseSessionReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseSessionReq.prototype.write = function(output) {
  output.writeStructBegin('TCloseSessionReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCloseSessionResp = module.exports.TCloseSessionResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCloseSessionResp.prototype = {};
TCloseSessionResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseSessionResp.prototype.write = function(output) {
  output.writeStructBegin('TCloseSessionResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetInfoValue = module.exports.TGetInfoValue = function(args) {
  this.stringValue = null;
  this.smallIntValue = null;
  this.integerBitmask = null;
  this.integerFlag = null;
  this.binaryValue = null;
  this.lenValue = null;
  if (args) {
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
    if (args.smallIntValue !== undefined && args.smallIntValue !== null) {
      this.smallIntValue = args.smallIntValue;
    }
    if (args.integerBitmask !== undefined && args.integerBitmask !== null) {
      this.integerBitmask = args.integerBitmask;
    }
    if (args.integerFlag !== undefined && args.integerFlag !== null) {
      this.integerFlag = args.integerFlag;
    }
    if (args.binaryValue !== undefined && args.binaryValue !== null) {
      this.binaryValue = args.binaryValue;
    }
    if (args.lenValue !== undefined && args.lenValue !== null) {
      this.lenValue = args.lenValue;
    }
  }
};
TGetInfoValue.prototype = {};
TGetInfoValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.smallIntValue = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.integerBitmask = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.integerFlag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.binaryValue = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.lenValue = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoValue.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoValue');
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.smallIntValue !== null && this.smallIntValue !== undefined) {
    output.writeFieldBegin('smallIntValue', Thrift.Type.I16, 2);
    output.writeI16(this.smallIntValue);
    output.writeFieldEnd();
  }
  if (this.integerBitmask !== null && this.integerBitmask !== undefined) {
    output.writeFieldBegin('integerBitmask', Thrift.Type.I32, 3);
    output.writeI32(this.integerBitmask);
    output.writeFieldEnd();
  }
  if (this.integerFlag !== null && this.integerFlag !== undefined) {
    output.writeFieldBegin('integerFlag', Thrift.Type.I32, 4);
    output.writeI32(this.integerFlag);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.I32, 5);
    output.writeI32(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.lenValue !== null && this.lenValue !== undefined) {
    output.writeFieldBegin('lenValue', Thrift.Type.I64, 6);
    output.writeI64(this.lenValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetInfoReq = module.exports.TGetInfoReq = function(args) {
  this.sessionHandle = null;
  this.infoType = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.infoType !== undefined && args.infoType !== null) {
      this.infoType = args.infoType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field infoType is unset!');
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetInfoReq.prototype = {};
TGetInfoReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.infoType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoReq.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.infoType !== null && this.infoType !== undefined) {
    output.writeFieldBegin('infoType', Thrift.Type.I32, 2);
    output.writeI32(this.infoType);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3329);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetInfoResp = module.exports.TGetInfoResp = function(args) {
  this.status = null;
  this.infoValue = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.infoValue !== undefined && args.infoValue !== null) {
      this.infoValue = new ttypes.TGetInfoValue(args.infoValue);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field infoValue is unset!');
    }
  }
};
TGetInfoResp.prototype = {};
TGetInfoResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.infoValue = new ttypes.TGetInfoValue();
        this.infoValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetInfoResp.prototype.write = function(output) {
  output.writeStructBegin('TGetInfoResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.infoValue !== null && this.infoValue !== undefined) {
    output.writeFieldBegin('infoValue', Thrift.Type.STRUCT, 2);
    this.infoValue.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSparkGetDirectResults = module.exports.TSparkGetDirectResults = function(args) {
  this.maxRows = null;
  this.maxBytes = null;
  if (args) {
    if (args.maxRows !== undefined && args.maxRows !== null) {
      this.maxRows = args.maxRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxRows is unset!');
    }
    if (args.maxBytes !== undefined && args.maxBytes !== null) {
      this.maxBytes = args.maxBytes;
    }
  }
};
TSparkGetDirectResults.prototype = {};
TSparkGetDirectResults.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.maxRows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.maxBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkGetDirectResults.prototype.write = function(output) {
  output.writeStructBegin('TSparkGetDirectResults');
  if (this.maxRows !== null && this.maxRows !== undefined) {
    output.writeFieldBegin('maxRows', Thrift.Type.I64, 1);
    output.writeI64(this.maxRows);
    output.writeFieldEnd();
  }
  if (this.maxBytes !== null && this.maxBytes !== undefined) {
    output.writeFieldBegin('maxBytes', Thrift.Type.I64, 2);
    output.writeI64(this.maxBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSparkDirectResults = module.exports.TSparkDirectResults = function(args) {
  this.operationStatus = null;
  this.resultSetMetadata = null;
  this.resultSet = null;
  this.closeOperation = null;
  if (args) {
    if (args.operationStatus !== undefined && args.operationStatus !== null) {
      this.operationStatus = new ttypes.TGetOperationStatusResp(args.operationStatus);
    }
    if (args.resultSetMetadata !== undefined && args.resultSetMetadata !== null) {
      this.resultSetMetadata = new ttypes.TGetResultSetMetadataResp(args.resultSetMetadata);
    }
    if (args.resultSet !== undefined && args.resultSet !== null) {
      this.resultSet = new ttypes.TFetchResultsResp(args.resultSet);
    }
    if (args.closeOperation !== undefined && args.closeOperation !== null) {
      this.closeOperation = new ttypes.TCloseOperationResp(args.closeOperation);
    }
  }
};
TSparkDirectResults.prototype = {};
TSparkDirectResults.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationStatus = new ttypes.TGetOperationStatusResp();
        this.operationStatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetMetadata = new ttypes.TGetResultSetMetadataResp();
        this.resultSetMetadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSet = new ttypes.TFetchResultsResp();
        this.resultSet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.closeOperation = new ttypes.TCloseOperationResp();
        this.closeOperation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkDirectResults.prototype.write = function(output) {
  output.writeStructBegin('TSparkDirectResults');
  if (this.operationStatus !== null && this.operationStatus !== undefined) {
    output.writeFieldBegin('operationStatus', Thrift.Type.STRUCT, 1);
    this.operationStatus.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetMetadata !== null && this.resultSetMetadata !== undefined) {
    output.writeFieldBegin('resultSetMetadata', Thrift.Type.STRUCT, 2);
    this.resultSetMetadata.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSet !== null && this.resultSet !== undefined) {
    output.writeFieldBegin('resultSet', Thrift.Type.STRUCT, 3);
    this.resultSet.write(output);
    output.writeFieldEnd();
  }
  if (this.closeOperation !== null && this.closeOperation !== undefined) {
    output.writeFieldBegin('closeOperation', Thrift.Type.STRUCT, 4);
    this.closeOperation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSparkArrowTypes = module.exports.TSparkArrowTypes = function(args) {
  this.timestampAsArrow = null;
  this.decimalAsArrow = null;
  this.complexTypesAsArrow = null;
  this.intervalTypesAsArrow = null;
  this.nullTypeAsArrow = null;
  if (args) {
    if (args.timestampAsArrow !== undefined && args.timestampAsArrow !== null) {
      this.timestampAsArrow = args.timestampAsArrow;
    }
    if (args.decimalAsArrow !== undefined && args.decimalAsArrow !== null) {
      this.decimalAsArrow = args.decimalAsArrow;
    }
    if (args.complexTypesAsArrow !== undefined && args.complexTypesAsArrow !== null) {
      this.complexTypesAsArrow = args.complexTypesAsArrow;
    }
    if (args.intervalTypesAsArrow !== undefined && args.intervalTypesAsArrow !== null) {
      this.intervalTypesAsArrow = args.intervalTypesAsArrow;
    }
    if (args.nullTypeAsArrow !== undefined && args.nullTypeAsArrow !== null) {
      this.nullTypeAsArrow = args.nullTypeAsArrow;
    }
  }
};
TSparkArrowTypes.prototype = {};
TSparkArrowTypes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.timestampAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.decimalAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.complexTypesAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.intervalTypesAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.nullTypeAsArrow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkArrowTypes.prototype.write = function(output) {
  output.writeStructBegin('TSparkArrowTypes');
  if (this.timestampAsArrow !== null && this.timestampAsArrow !== undefined) {
    output.writeFieldBegin('timestampAsArrow', Thrift.Type.BOOL, 1);
    output.writeBool(this.timestampAsArrow);
    output.writeFieldEnd();
  }
  if (this.decimalAsArrow !== null && this.decimalAsArrow !== undefined) {
    output.writeFieldBegin('decimalAsArrow', Thrift.Type.BOOL, 2);
    output.writeBool(this.decimalAsArrow);
    output.writeFieldEnd();
  }
  if (this.complexTypesAsArrow !== null && this.complexTypesAsArrow !== undefined) {
    output.writeFieldBegin('complexTypesAsArrow', Thrift.Type.BOOL, 3);
    output.writeBool(this.complexTypesAsArrow);
    output.writeFieldEnd();
  }
  if (this.intervalTypesAsArrow !== null && this.intervalTypesAsArrow !== undefined) {
    output.writeFieldBegin('intervalTypesAsArrow', Thrift.Type.BOOL, 4);
    output.writeBool(this.intervalTypesAsArrow);
    output.writeFieldEnd();
  }
  if (this.nullTypeAsArrow !== null && this.nullTypeAsArrow !== undefined) {
    output.writeFieldBegin('nullTypeAsArrow', Thrift.Type.BOOL, 5);
    output.writeBool(this.nullTypeAsArrow);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TExecuteStatementReq = module.exports.TExecuteStatementReq = function(args) {
  this.sessionHandle = null;
  this.statement = null;
  this.confOverlay = null;
  this.runAsync = false;
  this.getDirectResults = null;
  this.queryTimeout = 0;
  this.canReadArrowResult = null;
  this.canDownloadResult = null;
  this.canDecompressLZ4Result = null;
  this.maxBytesPerFile = null;
  this.useArrowNativeTypes = null;
  this.resultRowLimit = null;
  this.parameters = null;
  this.maxBytesPerBatch = null;
  this.statementConf = null;
  this.operationId = null;
  this.sessionConf = null;
  this.rejectHighCostQueries = null;
  this.estimatedCost = null;
  this.executionVersion = null;
  this.requestValidation = null;
  this.resultPersistenceMode = null;
  this.trimArrowBatchesToLimit = null;
  this.fetchDisposition = null;
  this.enforceResultPersistenceMode = null;
  this.statementList = null;
  this.persistResultManifest = null;
  this.resultRetentionSeconds = null;
  this.resultByteLimit = null;
  this.resultDataFormat = null;
  this.originatingClientIdentity = null;
  this.preferSingleFileResult = null;
  this.preferDriverOnlyUpload = null;
  this.enforceEmbeddedSchemaCorrectness = false;
  this.idempotencyToken = null;
  this.throwErrorOnByteLimitTruncation = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field statement is unset!');
    }
    if (args.confOverlay !== undefined && args.confOverlay !== null) {
      this.confOverlay = Thrift.copyMap(args.confOverlay, [null]);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.queryTimeout !== undefined && args.queryTimeout !== null) {
      this.queryTimeout = args.queryTimeout;
    }
    if (args.canReadArrowResult !== undefined && args.canReadArrowResult !== null) {
      this.canReadArrowResult = args.canReadArrowResult;
    }
    if (args.canDownloadResult !== undefined && args.canDownloadResult !== null) {
      this.canDownloadResult = args.canDownloadResult;
    }
    if (args.canDecompressLZ4Result !== undefined && args.canDecompressLZ4Result !== null) {
      this.canDecompressLZ4Result = args.canDecompressLZ4Result;
    }
    if (args.maxBytesPerFile !== undefined && args.maxBytesPerFile !== null) {
      this.maxBytesPerFile = args.maxBytesPerFile;
    }
    if (args.useArrowNativeTypes !== undefined && args.useArrowNativeTypes !== null) {
      this.useArrowNativeTypes = new ttypes.TSparkArrowTypes(args.useArrowNativeTypes);
    }
    if (args.resultRowLimit !== undefined && args.resultRowLimit !== null) {
      this.resultRowLimit = args.resultRowLimit;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyList(args.parameters, [ttypes.TSparkParameter]);
    }
    if (args.maxBytesPerBatch !== undefined && args.maxBytesPerBatch !== null) {
      this.maxBytesPerBatch = args.maxBytesPerBatch;
    }
    if (args.statementConf !== undefined && args.statementConf !== null) {
      this.statementConf = new ttypes.TStatementConf(args.statementConf);
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
    if (args.rejectHighCostQueries !== undefined && args.rejectHighCostQueries !== null) {
      this.rejectHighCostQueries = args.rejectHighCostQueries;
    }
    if (args.estimatedCost !== undefined && args.estimatedCost !== null) {
      this.estimatedCost = args.estimatedCost;
    }
    if (args.executionVersion !== undefined && args.executionVersion !== null) {
      this.executionVersion = args.executionVersion;
    }
    if (args.requestValidation !== undefined && args.requestValidation !== null) {
      this.requestValidation = args.requestValidation;
    }
    if (args.resultPersistenceMode !== undefined && args.resultPersistenceMode !== null) {
      this.resultPersistenceMode = args.resultPersistenceMode;
    }
    if (args.trimArrowBatchesToLimit !== undefined && args.trimArrowBatchesToLimit !== null) {
      this.trimArrowBatchesToLimit = args.trimArrowBatchesToLimit;
    }
    if (args.fetchDisposition !== undefined && args.fetchDisposition !== null) {
      this.fetchDisposition = args.fetchDisposition;
    }
    if (args.enforceResultPersistenceMode !== undefined && args.enforceResultPersistenceMode !== null) {
      this.enforceResultPersistenceMode = args.enforceResultPersistenceMode;
    }
    if (args.statementList !== undefined && args.statementList !== null) {
      this.statementList = Thrift.copyList(args.statementList, [null]);
    }
    if (args.persistResultManifest !== undefined && args.persistResultManifest !== null) {
      this.persistResultManifest = args.persistResultManifest;
    }
    if (args.resultRetentionSeconds !== undefined && args.resultRetentionSeconds !== null) {
      this.resultRetentionSeconds = args.resultRetentionSeconds;
    }
    if (args.resultByteLimit !== undefined && args.resultByteLimit !== null) {
      this.resultByteLimit = args.resultByteLimit;
    }
    if (args.resultDataFormat !== undefined && args.resultDataFormat !== null) {
      this.resultDataFormat = new ttypes.TDBSqlResultFormat(args.resultDataFormat);
    }
    if (args.originatingClientIdentity !== undefined && args.originatingClientIdentity !== null) {
      this.originatingClientIdentity = args.originatingClientIdentity;
    }
    if (args.preferSingleFileResult !== undefined && args.preferSingleFileResult !== null) {
      this.preferSingleFileResult = args.preferSingleFileResult;
    }
    if (args.preferDriverOnlyUpload !== undefined && args.preferDriverOnlyUpload !== null) {
      this.preferDriverOnlyUpload = args.preferDriverOnlyUpload;
    }
    if (args.enforceEmbeddedSchemaCorrectness !== undefined && args.enforceEmbeddedSchemaCorrectness !== null) {
      this.enforceEmbeddedSchemaCorrectness = args.enforceEmbeddedSchemaCorrectness;
    }
    if (args.idempotencyToken !== undefined && args.idempotencyToken !== null) {
      this.idempotencyToken = args.idempotencyToken;
    }
    if (args.throwErrorOnByteLimitTruncation !== undefined && args.throwErrorOnByteLimitTruncation !== null) {
      this.throwErrorOnByteLimitTruncation = args.throwErrorOnByteLimitTruncation;
    }
  }
};
TExecuteStatementReq.prototype = {};
TExecuteStatementReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size278 = 0;
        var _rtmp3282;
        this.confOverlay = {};
        var _ktype279 = 0;
        var _vtype280 = 0;
        _rtmp3282 = input.readMapBegin();
        _ktype279 = _rtmp3282.ktype;
        _vtype280 = _rtmp3282.vtype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var key284 = null;
          var val285 = null;
          key284 = input.readString();
          val285 = input.readString();
          this.confOverlay[key284] = val285;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.queryTimeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.canReadArrowResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.BOOL) {
        this.canDownloadResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1284:
      if (ftype == Thrift.Type.BOOL) {
        this.canDecompressLZ4Result = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1285:
      if (ftype == Thrift.Type.I64) {
        this.maxBytesPerFile = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1286:
      if (ftype == Thrift.Type.STRUCT) {
        this.useArrowNativeTypes = new ttypes.TSparkArrowTypes();
        this.useArrowNativeTypes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1287:
      if (ftype == Thrift.Type.I64) {
        this.resultRowLimit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1288:
      if (ftype == Thrift.Type.LIST) {
        var _size286 = 0;
        var _rtmp3290;
        this.parameters = [];
        var _etype289 = 0;
        _rtmp3290 = input.readListBegin();
        _etype289 = _rtmp3290.etype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          var elem292 = null;
          elem292 = new ttypes.TSparkParameter();
          elem292.read(input);
          this.parameters.push(elem292);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1289:
      if (ftype == Thrift.Type.I64) {
        this.maxBytesPerBatch = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1296:
      if (ftype == Thrift.Type.STRUCT) {
        this.statementConf = new ttypes.TStatementConf();
        this.statementConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3331:
      if (ftype == Thrift.Type.BOOL) {
        this.rejectHighCostQueries = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3332:
      if (ftype == Thrift.Type.DOUBLE) {
        this.estimatedCost = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3333:
      if (ftype == Thrift.Type.I16) {
        this.executionVersion = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3334:
      if (ftype == Thrift.Type.STRING) {
        this.requestValidation = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3335:
      if (ftype == Thrift.Type.I32) {
        this.resultPersistenceMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3336:
      if (ftype == Thrift.Type.BOOL) {
        this.trimArrowBatchesToLimit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3337:
      if (ftype == Thrift.Type.I32) {
        this.fetchDisposition = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3344:
      if (ftype == Thrift.Type.BOOL) {
        this.enforceResultPersistenceMode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3345:
      if (ftype == Thrift.Type.LIST) {
        var _size293 = 0;
        var _rtmp3297;
        this.statementList = [];
        var _etype296 = 0;
        _rtmp3297 = input.readListBegin();
        _etype296 = _rtmp3297.etype;
        _size293 = _rtmp3297.size;
        for (var _i298 = 0; _i298 < _size293; ++_i298)
        {
          var elem299 = null;
          elem299 = new ttypes.TDBSqlStatement();
          elem299.read(input);
          this.statementList.push(elem299);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3346:
      if (ftype == Thrift.Type.BOOL) {
        this.persistResultManifest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3347:
      if (ftype == Thrift.Type.I64) {
        this.resultRetentionSeconds = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3348:
      if (ftype == Thrift.Type.I64) {
        this.resultByteLimit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3349:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultDataFormat = new ttypes.TDBSqlResultFormat();
        this.resultDataFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3350:
      if (ftype == Thrift.Type.STRING) {
        this.originatingClientIdentity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3351:
      if (ftype == Thrift.Type.BOOL) {
        this.preferSingleFileResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3352:
      if (ftype == Thrift.Type.BOOL) {
        this.preferDriverOnlyUpload = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3353:
      if (ftype == Thrift.Type.BOOL) {
        this.enforceEmbeddedSchemaCorrectness = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3360:
      if (ftype == Thrift.Type.STRING) {
        this.idempotencyToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3361:
      if (ftype == Thrift.Type.BOOL) {
        this.throwErrorOnByteLimitTruncation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExecuteStatementReq.prototype.write = function(output) {
  output.writeStructBegin('TExecuteStatementReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 2);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  if (this.confOverlay !== null && this.confOverlay !== undefined) {
    output.writeFieldBegin('confOverlay', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.confOverlay));
    for (var kiter300 in this.confOverlay)
    {
      if (this.confOverlay.hasOwnProperty(kiter300))
      {
        var viter301 = this.confOverlay[kiter300];
        output.writeString(kiter300);
        output.writeString(viter301);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 4);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.queryTimeout !== null && this.queryTimeout !== undefined) {
    output.writeFieldBegin('queryTimeout', Thrift.Type.I64, 5);
    output.writeI64(this.queryTimeout);
    output.writeFieldEnd();
  }
  if (this.canReadArrowResult !== null && this.canReadArrowResult !== undefined) {
    output.writeFieldBegin('canReadArrowResult', Thrift.Type.BOOL, 1282);
    output.writeBool(this.canReadArrowResult);
    output.writeFieldEnd();
  }
  if (this.canDownloadResult !== null && this.canDownloadResult !== undefined) {
    output.writeFieldBegin('canDownloadResult', Thrift.Type.BOOL, 1283);
    output.writeBool(this.canDownloadResult);
    output.writeFieldEnd();
  }
  if (this.canDecompressLZ4Result !== null && this.canDecompressLZ4Result !== undefined) {
    output.writeFieldBegin('canDecompressLZ4Result', Thrift.Type.BOOL, 1284);
    output.writeBool(this.canDecompressLZ4Result);
    output.writeFieldEnd();
  }
  if (this.maxBytesPerFile !== null && this.maxBytesPerFile !== undefined) {
    output.writeFieldBegin('maxBytesPerFile', Thrift.Type.I64, 1285);
    output.writeI64(this.maxBytesPerFile);
    output.writeFieldEnd();
  }
  if (this.useArrowNativeTypes !== null && this.useArrowNativeTypes !== undefined) {
    output.writeFieldBegin('useArrowNativeTypes', Thrift.Type.STRUCT, 1286);
    this.useArrowNativeTypes.write(output);
    output.writeFieldEnd();
  }
  if (this.resultRowLimit !== null && this.resultRowLimit !== undefined) {
    output.writeFieldBegin('resultRowLimit', Thrift.Type.I64, 1287);
    output.writeI64(this.resultRowLimit);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 1288);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter302 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter302))
      {
        iter302 = this.parameters[iter302];
        iter302.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.maxBytesPerBatch !== null && this.maxBytesPerBatch !== undefined) {
    output.writeFieldBegin('maxBytesPerBatch', Thrift.Type.I64, 1289);
    output.writeI64(this.maxBytesPerBatch);
    output.writeFieldEnd();
  }
  if (this.statementConf !== null && this.statementConf !== undefined) {
    output.writeFieldBegin('statementConf', Thrift.Type.STRUCT, 1296);
    this.statementConf.write(output);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  if (this.rejectHighCostQueries !== null && this.rejectHighCostQueries !== undefined) {
    output.writeFieldBegin('rejectHighCostQueries', Thrift.Type.BOOL, 3331);
    output.writeBool(this.rejectHighCostQueries);
    output.writeFieldEnd();
  }
  if (this.estimatedCost !== null && this.estimatedCost !== undefined) {
    output.writeFieldBegin('estimatedCost', Thrift.Type.DOUBLE, 3332);
    output.writeDouble(this.estimatedCost);
    output.writeFieldEnd();
  }
  if (this.executionVersion !== null && this.executionVersion !== undefined) {
    output.writeFieldBegin('executionVersion', Thrift.Type.I16, 3333);
    output.writeI16(this.executionVersion);
    output.writeFieldEnd();
  }
  if (this.requestValidation !== null && this.requestValidation !== undefined) {
    output.writeFieldBegin('requestValidation', Thrift.Type.STRING, 3334);
    output.writeBinary(this.requestValidation);
    output.writeFieldEnd();
  }
  if (this.resultPersistenceMode !== null && this.resultPersistenceMode !== undefined) {
    output.writeFieldBegin('resultPersistenceMode', Thrift.Type.I32, 3335);
    output.writeI32(this.resultPersistenceMode);
    output.writeFieldEnd();
  }
  if (this.trimArrowBatchesToLimit !== null && this.trimArrowBatchesToLimit !== undefined) {
    output.writeFieldBegin('trimArrowBatchesToLimit', Thrift.Type.BOOL, 3336);
    output.writeBool(this.trimArrowBatchesToLimit);
    output.writeFieldEnd();
  }
  if (this.fetchDisposition !== null && this.fetchDisposition !== undefined) {
    output.writeFieldBegin('fetchDisposition', Thrift.Type.I32, 3337);
    output.writeI32(this.fetchDisposition);
    output.writeFieldEnd();
  }
  if (this.enforceResultPersistenceMode !== null && this.enforceResultPersistenceMode !== undefined) {
    output.writeFieldBegin('enforceResultPersistenceMode', Thrift.Type.BOOL, 3344);
    output.writeBool(this.enforceResultPersistenceMode);
    output.writeFieldEnd();
  }
  if (this.statementList !== null && this.statementList !== undefined) {
    output.writeFieldBegin('statementList', Thrift.Type.LIST, 3345);
    output.writeListBegin(Thrift.Type.STRUCT, this.statementList.length);
    for (var iter303 in this.statementList)
    {
      if (this.statementList.hasOwnProperty(iter303))
      {
        iter303 = this.statementList[iter303];
        iter303.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.persistResultManifest !== null && this.persistResultManifest !== undefined) {
    output.writeFieldBegin('persistResultManifest', Thrift.Type.BOOL, 3346);
    output.writeBool(this.persistResultManifest);
    output.writeFieldEnd();
  }
  if (this.resultRetentionSeconds !== null && this.resultRetentionSeconds !== undefined) {
    output.writeFieldBegin('resultRetentionSeconds', Thrift.Type.I64, 3347);
    output.writeI64(this.resultRetentionSeconds);
    output.writeFieldEnd();
  }
  if (this.resultByteLimit !== null && this.resultByteLimit !== undefined) {
    output.writeFieldBegin('resultByteLimit', Thrift.Type.I64, 3348);
    output.writeI64(this.resultByteLimit);
    output.writeFieldEnd();
  }
  if (this.resultDataFormat !== null && this.resultDataFormat !== undefined) {
    output.writeFieldBegin('resultDataFormat', Thrift.Type.STRUCT, 3349);
    this.resultDataFormat.write(output);
    output.writeFieldEnd();
  }
  if (this.originatingClientIdentity !== null && this.originatingClientIdentity !== undefined) {
    output.writeFieldBegin('originatingClientIdentity', Thrift.Type.STRING, 3350);
    output.writeString(this.originatingClientIdentity);
    output.writeFieldEnd();
  }
  if (this.preferSingleFileResult !== null && this.preferSingleFileResult !== undefined) {
    output.writeFieldBegin('preferSingleFileResult', Thrift.Type.BOOL, 3351);
    output.writeBool(this.preferSingleFileResult);
    output.writeFieldEnd();
  }
  if (this.preferDriverOnlyUpload !== null && this.preferDriverOnlyUpload !== undefined) {
    output.writeFieldBegin('preferDriverOnlyUpload', Thrift.Type.BOOL, 3352);
    output.writeBool(this.preferDriverOnlyUpload);
    output.writeFieldEnd();
  }
  if (this.enforceEmbeddedSchemaCorrectness !== null && this.enforceEmbeddedSchemaCorrectness !== undefined) {
    output.writeFieldBegin('enforceEmbeddedSchemaCorrectness', Thrift.Type.BOOL, 3353);
    output.writeBool(this.enforceEmbeddedSchemaCorrectness);
    output.writeFieldEnd();
  }
  if (this.idempotencyToken !== null && this.idempotencyToken !== undefined) {
    output.writeFieldBegin('idempotencyToken', Thrift.Type.STRING, 3360);
    output.writeString(this.idempotencyToken);
    output.writeFieldEnd();
  }
  if (this.throwErrorOnByteLimitTruncation !== null && this.throwErrorOnByteLimitTruncation !== undefined) {
    output.writeFieldBegin('throwErrorOnByteLimitTruncation', Thrift.Type.BOOL, 3361);
    output.writeBool(this.throwErrorOnByteLimitTruncation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TDBSqlStatement = module.exports.TDBSqlStatement = function(args) {
  this.statement = null;
  if (args) {
    if (args.statement !== undefined && args.statement !== null) {
      this.statement = args.statement;
    }
  }
};
TDBSqlStatement.prototype = {};
TDBSqlStatement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.statement = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDBSqlStatement.prototype.write = function(output) {
  output.writeStructBegin('TDBSqlStatement');
  if (this.statement !== null && this.statement !== undefined) {
    output.writeFieldBegin('statement', Thrift.Type.STRING, 1);
    output.writeString(this.statement);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSparkParameterValue = module.exports.TSparkParameterValue = function(args) {
  this.stringValue = null;
  this.doubleValue = null;
  this.booleanValue = null;
  if (args) {
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
    if (args.doubleValue !== undefined && args.doubleValue !== null) {
      this.doubleValue = args.doubleValue;
    }
    if (args.booleanValue !== undefined && args.booleanValue !== null) {
      this.booleanValue = args.booleanValue;
    }
  }
};
TSparkParameterValue.prototype = {};
TSparkParameterValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.booleanValue = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkParameterValue.prototype.write = function(output) {
  output.writeStructBegin('TSparkParameterValue');
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.booleanValue !== null && this.booleanValue !== undefined) {
    output.writeFieldBegin('booleanValue', Thrift.Type.BOOL, 3);
    output.writeBool(this.booleanValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSparkParameter = module.exports.TSparkParameter = function(args) {
  this.ordinal = null;
  this.name = null;
  this.type = null;
  this.value = null;
  if (args) {
    if (args.ordinal !== undefined && args.ordinal !== null) {
      this.ordinal = args.ordinal;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new ttypes.TSparkParameterValue(args.value);
    }
  }
};
TSparkParameter.prototype = {};
TSparkParameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ordinal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ttypes.TSparkParameterValue();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSparkParameter.prototype.write = function(output) {
  output.writeStructBegin('TSparkParameter');
  if (this.ordinal !== null && this.ordinal !== undefined) {
    output.writeFieldBegin('ordinal', Thrift.Type.I32, 1);
    output.writeI32(this.ordinal);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 4);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStatementConf = module.exports.TStatementConf = function(args) {
  this.sessionless = null;
  this.initialNamespace = null;
  this.client_protocol = null;
  this.client_protocol_i64 = null;
  if (args) {
    if (args.sessionless !== undefined && args.sessionless !== null) {
      this.sessionless = args.sessionless;
    }
    if (args.initialNamespace !== undefined && args.initialNamespace !== null) {
      this.initialNamespace = new ttypes.TNamespace(args.initialNamespace);
    }
    if (args.client_protocol !== undefined && args.client_protocol !== null) {
      this.client_protocol = args.client_protocol;
    }
    if (args.client_protocol_i64 !== undefined && args.client_protocol_i64 !== null) {
      this.client_protocol_i64 = args.client_protocol_i64;
    }
  }
};
TStatementConf.prototype = {};
TStatementConf.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.sessionless = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.initialNamespace = new ttypes.TNamespace();
        this.initialNamespace.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.client_protocol = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.client_protocol_i64 = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStatementConf.prototype.write = function(output) {
  output.writeStructBegin('TStatementConf');
  if (this.sessionless !== null && this.sessionless !== undefined) {
    output.writeFieldBegin('sessionless', Thrift.Type.BOOL, 1);
    output.writeBool(this.sessionless);
    output.writeFieldEnd();
  }
  if (this.initialNamespace !== null && this.initialNamespace !== undefined) {
    output.writeFieldBegin('initialNamespace', Thrift.Type.STRUCT, 2);
    this.initialNamespace.write(output);
    output.writeFieldEnd();
  }
  if (this.client_protocol !== null && this.client_protocol !== undefined) {
    output.writeFieldBegin('client_protocol', Thrift.Type.I32, 3);
    output.writeI32(this.client_protocol);
    output.writeFieldEnd();
  }
  if (this.client_protocol_i64 !== null && this.client_protocol_i64 !== undefined) {
    output.writeFieldBegin('client_protocol_i64', Thrift.Type.I64, 4);
    output.writeI64(this.client_protocol_i64);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TExecuteStatementResp = module.exports.TExecuteStatementResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  this.executionRejected = null;
  this.maxClusterCapacity = null;
  this.queryCost = null;
  this.sessionConf = null;
  this.currentClusterLoad = null;
  this.idempotencyType = null;
  this.remoteResultCacheEnabled = null;
  this.isServerless = null;
  this.operationHandles = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
    if (args.executionRejected !== undefined && args.executionRejected !== null) {
      this.executionRejected = args.executionRejected;
    }
    if (args.maxClusterCapacity !== undefined && args.maxClusterCapacity !== null) {
      this.maxClusterCapacity = args.maxClusterCapacity;
    }
    if (args.queryCost !== undefined && args.queryCost !== null) {
      this.queryCost = args.queryCost;
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
    if (args.currentClusterLoad !== undefined && args.currentClusterLoad !== null) {
      this.currentClusterLoad = args.currentClusterLoad;
    }
    if (args.idempotencyType !== undefined && args.idempotencyType !== null) {
      this.idempotencyType = args.idempotencyType;
    }
    if (args.remoteResultCacheEnabled !== undefined && args.remoteResultCacheEnabled !== null) {
      this.remoteResultCacheEnabled = args.remoteResultCacheEnabled;
    }
    if (args.isServerless !== undefined && args.isServerless !== null) {
      this.isServerless = args.isServerless;
    }
    if (args.operationHandles !== undefined && args.operationHandles !== null) {
      this.operationHandles = Thrift.copyList(args.operationHandles, [ttypes.TOperationHandle]);
    }
  }
};
TExecuteStatementResp.prototype = {};
TExecuteStatementResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.BOOL) {
        this.executionRejected = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.DOUBLE) {
        this.maxClusterCapacity = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3331:
      if (ftype == Thrift.Type.DOUBLE) {
        this.queryCost = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3332:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3333:
      if (ftype == Thrift.Type.DOUBLE) {
        this.currentClusterLoad = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3334:
      if (ftype == Thrift.Type.I32) {
        this.idempotencyType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3335:
      if (ftype == Thrift.Type.BOOL) {
        this.remoteResultCacheEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3336:
      if (ftype == Thrift.Type.BOOL) {
        this.isServerless = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3337:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.operationHandles = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = new ttypes.TOperationHandle();
          elem310.read(input);
          this.operationHandles.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExecuteStatementResp.prototype.write = function(output) {
  output.writeStructBegin('TExecuteStatementResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  if (this.executionRejected !== null && this.executionRejected !== undefined) {
    output.writeFieldBegin('executionRejected', Thrift.Type.BOOL, 3329);
    output.writeBool(this.executionRejected);
    output.writeFieldEnd();
  }
  if (this.maxClusterCapacity !== null && this.maxClusterCapacity !== undefined) {
    output.writeFieldBegin('maxClusterCapacity', Thrift.Type.DOUBLE, 3330);
    output.writeDouble(this.maxClusterCapacity);
    output.writeFieldEnd();
  }
  if (this.queryCost !== null && this.queryCost !== undefined) {
    output.writeFieldBegin('queryCost', Thrift.Type.DOUBLE, 3331);
    output.writeDouble(this.queryCost);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3332);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  if (this.currentClusterLoad !== null && this.currentClusterLoad !== undefined) {
    output.writeFieldBegin('currentClusterLoad', Thrift.Type.DOUBLE, 3333);
    output.writeDouble(this.currentClusterLoad);
    output.writeFieldEnd();
  }
  if (this.idempotencyType !== null && this.idempotencyType !== undefined) {
    output.writeFieldBegin('idempotencyType', Thrift.Type.I32, 3334);
    output.writeI32(this.idempotencyType);
    output.writeFieldEnd();
  }
  if (this.remoteResultCacheEnabled !== null && this.remoteResultCacheEnabled !== undefined) {
    output.writeFieldBegin('remoteResultCacheEnabled', Thrift.Type.BOOL, 3335);
    output.writeBool(this.remoteResultCacheEnabled);
    output.writeFieldEnd();
  }
  if (this.isServerless !== null && this.isServerless !== undefined) {
    output.writeFieldBegin('isServerless', Thrift.Type.BOOL, 3336);
    output.writeBool(this.isServerless);
    output.writeFieldEnd();
  }
  if (this.operationHandles !== null && this.operationHandles !== undefined) {
    output.writeFieldBegin('operationHandles', Thrift.Type.LIST, 3337);
    output.writeListBegin(Thrift.Type.STRUCT, this.operationHandles.length);
    for (var iter311 in this.operationHandles)
    {
      if (this.operationHandles.hasOwnProperty(iter311))
      {
        iter311 = this.operationHandles[iter311];
        iter311.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTypeInfoReq = module.exports.TGetTypeInfoReq = function(args) {
  this.sessionHandle = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetTypeInfoReq.prototype = {};
TGetTypeInfoReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTypeInfoReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTypeInfoReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTypeInfoResp = module.exports.TGetTypeInfoResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetTypeInfoResp.prototype = {};
TGetTypeInfoResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTypeInfoResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTypeInfoResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetCatalogsReq = module.exports.TGetCatalogsReq = function(args) {
  this.sessionHandle = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetCatalogsReq.prototype = {};
TGetCatalogsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCatalogsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetCatalogsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetCatalogsResp = module.exports.TGetCatalogsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetCatalogsResp.prototype = {};
TGetCatalogsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCatalogsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetCatalogsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetSchemasReq = module.exports.TGetSchemasReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetSchemasReq.prototype = {};
TGetSchemasReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetSchemasReq.prototype.write = function(output) {
  output.writeStructBegin('TGetSchemasReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetSchemasResp = module.exports.TGetSchemasResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetSchemasResp.prototype = {};
TGetSchemasResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetSchemasResp.prototype.write = function(output) {
  output.writeStructBegin('TGetSchemasResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTablesReq = module.exports.TGetTablesReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.tableName = null;
  this.tableTypes = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.tableTypes !== undefined && args.tableTypes !== null) {
      this.tableTypes = Thrift.copyList(args.tableTypes, [null]);
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetTablesReq.prototype = {};
TGetTablesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.tableTypes = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = input.readString();
          this.tableTypes.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTablesReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTablesReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableTypes !== null && this.tableTypes !== undefined) {
    output.writeFieldBegin('tableTypes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.tableTypes.length);
    for (var iter319 in this.tableTypes)
    {
      if (this.tableTypes.hasOwnProperty(iter319))
      {
        iter319 = this.tableTypes[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTablesResp = module.exports.TGetTablesResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetTablesResp.prototype = {};
TGetTablesResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTablesResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTablesResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTableTypesReq = module.exports.TGetTableTypesReq = function(args) {
  this.sessionHandle = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetTableTypesReq.prototype = {};
TGetTableTypesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTableTypesReq.prototype.write = function(output) {
  output.writeStructBegin('TGetTableTypesReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetTableTypesResp = module.exports.TGetTableTypesResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetTableTypesResp.prototype = {};
TGetTableTypesResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetTableTypesResp.prototype.write = function(output) {
  output.writeStructBegin('TGetTableTypesResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetColumnsReq = module.exports.TGetColumnsReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.tableName = null;
  this.columnName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetColumnsReq.prototype = {};
TGetColumnsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetColumnsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetColumnsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 5);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetColumnsResp = module.exports.TGetColumnsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetColumnsResp.prototype = {};
TGetColumnsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetColumnsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetColumnsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetFunctionsReq = module.exports.TGetFunctionsReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.functionName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.functionName !== undefined && args.functionName !== null) {
      this.functionName = args.functionName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field functionName is unset!');
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetFunctionsReq.prototype = {};
TGetFunctionsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.functionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetFunctionsReq.prototype.write = function(output) {
  output.writeStructBegin('TGetFunctionsReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.functionName !== null && this.functionName !== undefined) {
    output.writeFieldBegin('functionName', Thrift.Type.STRING, 4);
    output.writeString(this.functionName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetFunctionsResp = module.exports.TGetFunctionsResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetFunctionsResp.prototype = {};
TGetFunctionsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetFunctionsResp.prototype.write = function(output) {
  output.writeStructBegin('TGetFunctionsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetPrimaryKeysReq = module.exports.TGetPrimaryKeysReq = function(args) {
  this.sessionHandle = null;
  this.catalogName = null;
  this.schemaName = null;
  this.tableName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.catalogName !== undefined && args.catalogName !== null) {
      this.catalogName = args.catalogName;
    }
    if (args.schemaName !== undefined && args.schemaName !== null) {
      this.schemaName = args.schemaName;
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetPrimaryKeysReq.prototype = {};
TGetPrimaryKeysReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.catalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.schemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetPrimaryKeysReq.prototype.write = function(output) {
  output.writeStructBegin('TGetPrimaryKeysReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.catalogName !== null && this.catalogName !== undefined) {
    output.writeFieldBegin('catalogName', Thrift.Type.STRING, 2);
    output.writeString(this.catalogName);
    output.writeFieldEnd();
  }
  if (this.schemaName !== null && this.schemaName !== undefined) {
    output.writeFieldBegin('schemaName', Thrift.Type.STRING, 3);
    output.writeString(this.schemaName);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 4);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetPrimaryKeysResp = module.exports.TGetPrimaryKeysResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetPrimaryKeysResp.prototype = {};
TGetPrimaryKeysResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetPrimaryKeysResp.prototype.write = function(output) {
  output.writeStructBegin('TGetPrimaryKeysResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetCrossReferenceReq = module.exports.TGetCrossReferenceReq = function(args) {
  this.sessionHandle = null;
  this.parentCatalogName = null;
  this.parentSchemaName = null;
  this.parentTableName = null;
  this.foreignCatalogName = null;
  this.foreignSchemaName = null;
  this.foreignTableName = null;
  this.getDirectResults = null;
  this.runAsync = false;
  this.operationId = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.parentCatalogName !== undefined && args.parentCatalogName !== null) {
      this.parentCatalogName = args.parentCatalogName;
    }
    if (args.parentSchemaName !== undefined && args.parentSchemaName !== null) {
      this.parentSchemaName = args.parentSchemaName;
    }
    if (args.parentTableName !== undefined && args.parentTableName !== null) {
      this.parentTableName = args.parentTableName;
    }
    if (args.foreignCatalogName !== undefined && args.foreignCatalogName !== null) {
      this.foreignCatalogName = args.foreignCatalogName;
    }
    if (args.foreignSchemaName !== undefined && args.foreignSchemaName !== null) {
      this.foreignSchemaName = args.foreignSchemaName;
    }
    if (args.foreignTableName !== undefined && args.foreignTableName !== null) {
      this.foreignTableName = args.foreignTableName;
    }
    if (args.getDirectResults !== undefined && args.getDirectResults !== null) {
      this.getDirectResults = new ttypes.TSparkGetDirectResults(args.getDirectResults);
    }
    if (args.runAsync !== undefined && args.runAsync !== null) {
      this.runAsync = args.runAsync;
    }
    if (args.operationId !== undefined && args.operationId !== null) {
      this.operationId = new ttypes.THandleIdentifier(args.operationId);
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetCrossReferenceReq.prototype = {};
TGetCrossReferenceReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentCatalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.parentSchemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.parentTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.foreignCatalogName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.foreignSchemaName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.foreignTableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDirectResults = new ttypes.TSparkGetDirectResults();
        this.getDirectResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.runAsync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationId = new ttypes.THandleIdentifier();
        this.operationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCrossReferenceReq.prototype.write = function(output) {
  output.writeStructBegin('TGetCrossReferenceReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.parentCatalogName !== null && this.parentCatalogName !== undefined) {
    output.writeFieldBegin('parentCatalogName', Thrift.Type.STRING, 2);
    output.writeString(this.parentCatalogName);
    output.writeFieldEnd();
  }
  if (this.parentSchemaName !== null && this.parentSchemaName !== undefined) {
    output.writeFieldBegin('parentSchemaName', Thrift.Type.STRING, 3);
    output.writeString(this.parentSchemaName);
    output.writeFieldEnd();
  }
  if (this.parentTableName !== null && this.parentTableName !== undefined) {
    output.writeFieldBegin('parentTableName', Thrift.Type.STRING, 4);
    output.writeString(this.parentTableName);
    output.writeFieldEnd();
  }
  if (this.foreignCatalogName !== null && this.foreignCatalogName !== undefined) {
    output.writeFieldBegin('foreignCatalogName', Thrift.Type.STRING, 5);
    output.writeString(this.foreignCatalogName);
    output.writeFieldEnd();
  }
  if (this.foreignSchemaName !== null && this.foreignSchemaName !== undefined) {
    output.writeFieldBegin('foreignSchemaName', Thrift.Type.STRING, 6);
    output.writeString(this.foreignSchemaName);
    output.writeFieldEnd();
  }
  if (this.foreignTableName !== null && this.foreignTableName !== undefined) {
    output.writeFieldBegin('foreignTableName', Thrift.Type.STRING, 7);
    output.writeString(this.foreignTableName);
    output.writeFieldEnd();
  }
  if (this.getDirectResults !== null && this.getDirectResults !== undefined) {
    output.writeFieldBegin('getDirectResults', Thrift.Type.STRUCT, 1281);
    this.getDirectResults.write(output);
    output.writeFieldEnd();
  }
  if (this.runAsync !== null && this.runAsync !== undefined) {
    output.writeFieldBegin('runAsync', Thrift.Type.BOOL, 1282);
    output.writeBool(this.runAsync);
    output.writeFieldEnd();
  }
  if (this.operationId !== null && this.operationId !== undefined) {
    output.writeFieldBegin('operationId', Thrift.Type.STRUCT, 3329);
    this.operationId.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3330);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetCrossReferenceResp = module.exports.TGetCrossReferenceResp = function(args) {
  this.status = null;
  this.operationHandle = null;
  this.directResults = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    }
    if (args.directResults !== undefined && args.directResults !== null) {
      this.directResults = new ttypes.TSparkDirectResults(args.directResults);
    }
  }
};
TGetCrossReferenceResp.prototype = {};
TGetCrossReferenceResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.directResults = new ttypes.TSparkDirectResults();
        this.directResults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetCrossReferenceResp.prototype.write = function(output) {
  output.writeStructBegin('TGetCrossReferenceResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 2);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.directResults !== null && this.directResults !== undefined) {
    output.writeFieldBegin('directResults', Thrift.Type.STRUCT, 1281);
    this.directResults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetOperationStatusReq = module.exports.TGetOperationStatusReq = function(args) {
  this.operationHandle = null;
  this.getProgressUpdate = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
    if (args.getProgressUpdate !== undefined && args.getProgressUpdate !== null) {
      this.getProgressUpdate = args.getProgressUpdate;
    }
  }
};
TGetOperationStatusReq.prototype = {};
TGetOperationStatusReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.getProgressUpdate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetOperationStatusReq.prototype.write = function(output) {
  output.writeStructBegin('TGetOperationStatusReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.getProgressUpdate !== null && this.getProgressUpdate !== undefined) {
    output.writeFieldBegin('getProgressUpdate', Thrift.Type.BOOL, 2);
    output.writeBool(this.getProgressUpdate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetOperationStatusResp = module.exports.TGetOperationStatusResp = function(args) {
  this.status = null;
  this.operationState = null;
  this.sqlState = null;
  this.errorCode = null;
  this.errorMessage = null;
  this.taskStatus = null;
  this.operationStarted = null;
  this.operationCompleted = null;
  this.hasResultSet = null;
  this.progressUpdateResponse = null;
  this.numModifiedRows = null;
  this.displayMessage = null;
  this.diagnosticInfo = null;
  this.errorDetailsJson = null;
  this.responseValidation = null;
  this.idempotencyType = null;
  this.statementTimeout = null;
  this.statementTimeoutLevel = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.operationState !== undefined && args.operationState !== null) {
      this.operationState = args.operationState;
    }
    if (args.sqlState !== undefined && args.sqlState !== null) {
      this.sqlState = args.sqlState;
    }
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.errorMessage !== undefined && args.errorMessage !== null) {
      this.errorMessage = args.errorMessage;
    }
    if (args.taskStatus !== undefined && args.taskStatus !== null) {
      this.taskStatus = args.taskStatus;
    }
    if (args.operationStarted !== undefined && args.operationStarted !== null) {
      this.operationStarted = args.operationStarted;
    }
    if (args.operationCompleted !== undefined && args.operationCompleted !== null) {
      this.operationCompleted = args.operationCompleted;
    }
    if (args.hasResultSet !== undefined && args.hasResultSet !== null) {
      this.hasResultSet = args.hasResultSet;
    }
    if (args.progressUpdateResponse !== undefined && args.progressUpdateResponse !== null) {
      this.progressUpdateResponse = new ttypes.TProgressUpdateResp(args.progressUpdateResponse);
    }
    if (args.numModifiedRows !== undefined && args.numModifiedRows !== null) {
      this.numModifiedRows = args.numModifiedRows;
    }
    if (args.displayMessage !== undefined && args.displayMessage !== null) {
      this.displayMessage = args.displayMessage;
    }
    if (args.diagnosticInfo !== undefined && args.diagnosticInfo !== null) {
      this.diagnosticInfo = args.diagnosticInfo;
    }
    if (args.errorDetailsJson !== undefined && args.errorDetailsJson !== null) {
      this.errorDetailsJson = args.errorDetailsJson;
    }
    if (args.responseValidation !== undefined && args.responseValidation !== null) {
      this.responseValidation = args.responseValidation;
    }
    if (args.idempotencyType !== undefined && args.idempotencyType !== null) {
      this.idempotencyType = args.idempotencyType;
    }
    if (args.statementTimeout !== undefined && args.statementTimeout !== null) {
      this.statementTimeout = args.statementTimeout;
    }
    if (args.statementTimeoutLevel !== undefined && args.statementTimeoutLevel !== null) {
      this.statementTimeoutLevel = args.statementTimeoutLevel;
    }
  }
};
TGetOperationStatusResp.prototype = {};
TGetOperationStatusResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operationState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sqlState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.taskStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.operationStarted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.operationCompleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.hasResultSet = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.progressUpdateResponse = new ttypes.TProgressUpdateResp();
        this.progressUpdateResponse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.numModifiedRows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRING) {
        this.displayMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.STRING) {
        this.diagnosticInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.STRING) {
        this.errorDetailsJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRING) {
        this.responseValidation = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.I32) {
        this.idempotencyType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3331:
      if (ftype == Thrift.Type.I64) {
        this.statementTimeout = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3332:
      if (ftype == Thrift.Type.I32) {
        this.statementTimeoutLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetOperationStatusResp.prototype.write = function(output) {
  output.writeStructBegin('TGetOperationStatusResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.operationState !== null && this.operationState !== undefined) {
    output.writeFieldBegin('operationState', Thrift.Type.I32, 2);
    output.writeI32(this.operationState);
    output.writeFieldEnd();
  }
  if (this.sqlState !== null && this.sqlState !== undefined) {
    output.writeFieldBegin('sqlState', Thrift.Type.STRING, 3);
    output.writeString(this.sqlState);
    output.writeFieldEnd();
  }
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 4);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 5);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  if (this.taskStatus !== null && this.taskStatus !== undefined) {
    output.writeFieldBegin('taskStatus', Thrift.Type.STRING, 6);
    output.writeString(this.taskStatus);
    output.writeFieldEnd();
  }
  if (this.operationStarted !== null && this.operationStarted !== undefined) {
    output.writeFieldBegin('operationStarted', Thrift.Type.I64, 7);
    output.writeI64(this.operationStarted);
    output.writeFieldEnd();
  }
  if (this.operationCompleted !== null && this.operationCompleted !== undefined) {
    output.writeFieldBegin('operationCompleted', Thrift.Type.I64, 8);
    output.writeI64(this.operationCompleted);
    output.writeFieldEnd();
  }
  if (this.hasResultSet !== null && this.hasResultSet !== undefined) {
    output.writeFieldBegin('hasResultSet', Thrift.Type.BOOL, 9);
    output.writeBool(this.hasResultSet);
    output.writeFieldEnd();
  }
  if (this.progressUpdateResponse !== null && this.progressUpdateResponse !== undefined) {
    output.writeFieldBegin('progressUpdateResponse', Thrift.Type.STRUCT, 10);
    this.progressUpdateResponse.write(output);
    output.writeFieldEnd();
  }
  if (this.numModifiedRows !== null && this.numModifiedRows !== undefined) {
    output.writeFieldBegin('numModifiedRows', Thrift.Type.I64, 11);
    output.writeI64(this.numModifiedRows);
    output.writeFieldEnd();
  }
  if (this.displayMessage !== null && this.displayMessage !== undefined) {
    output.writeFieldBegin('displayMessage', Thrift.Type.STRING, 1281);
    output.writeString(this.displayMessage);
    output.writeFieldEnd();
  }
  if (this.diagnosticInfo !== null && this.diagnosticInfo !== undefined) {
    output.writeFieldBegin('diagnosticInfo', Thrift.Type.STRING, 1282);
    output.writeString(this.diagnosticInfo);
    output.writeFieldEnd();
  }
  if (this.errorDetailsJson !== null && this.errorDetailsJson !== undefined) {
    output.writeFieldBegin('errorDetailsJson', Thrift.Type.STRING, 1283);
    output.writeString(this.errorDetailsJson);
    output.writeFieldEnd();
  }
  if (this.responseValidation !== null && this.responseValidation !== undefined) {
    output.writeFieldBegin('responseValidation', Thrift.Type.STRING, 3329);
    output.writeBinary(this.responseValidation);
    output.writeFieldEnd();
  }
  if (this.idempotencyType !== null && this.idempotencyType !== undefined) {
    output.writeFieldBegin('idempotencyType', Thrift.Type.I32, 3330);
    output.writeI32(this.idempotencyType);
    output.writeFieldEnd();
  }
  if (this.statementTimeout !== null && this.statementTimeout !== undefined) {
    output.writeFieldBegin('statementTimeout', Thrift.Type.I64, 3331);
    output.writeI64(this.statementTimeout);
    output.writeFieldEnd();
  }
  if (this.statementTimeoutLevel !== null && this.statementTimeoutLevel !== undefined) {
    output.writeFieldBegin('statementTimeoutLevel', Thrift.Type.I32, 3332);
    output.writeI32(this.statementTimeoutLevel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCancelOperationReq = module.exports.TCancelOperationReq = function(args) {
  this.operationHandle = null;
  this.executionVersion = null;
  this.replacedByNextAttempt = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
    if (args.executionVersion !== undefined && args.executionVersion !== null) {
      this.executionVersion = args.executionVersion;
    }
    if (args.replacedByNextAttempt !== undefined && args.replacedByNextAttempt !== null) {
      this.replacedByNextAttempt = args.replacedByNextAttempt;
    }
  }
};
TCancelOperationReq.prototype = {};
TCancelOperationReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.I16) {
        this.executionVersion = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.BOOL) {
        this.replacedByNextAttempt = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelOperationReq.prototype.write = function(output) {
  output.writeStructBegin('TCancelOperationReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.executionVersion !== null && this.executionVersion !== undefined) {
    output.writeFieldBegin('executionVersion', Thrift.Type.I16, 3329);
    output.writeI16(this.executionVersion);
    output.writeFieldEnd();
  }
  if (this.replacedByNextAttempt !== null && this.replacedByNextAttempt !== undefined) {
    output.writeFieldBegin('replacedByNextAttempt', Thrift.Type.BOOL, 3330);
    output.writeBool(this.replacedByNextAttempt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCancelOperationResp = module.exports.TCancelOperationResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCancelOperationResp.prototype = {};
TCancelOperationResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelOperationResp.prototype.write = function(output) {
  output.writeStructBegin('TCancelOperationResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCloseOperationReq = module.exports.TCloseOperationReq = function(args) {
  this.operationHandle = null;
  this.closeReason = 0;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
    if (args.closeReason !== undefined && args.closeReason !== null) {
      this.closeReason = args.closeReason;
    }
  }
};
TCloseOperationReq.prototype = {};
TCloseOperationReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.I32) {
        this.closeReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseOperationReq.prototype.write = function(output) {
  output.writeStructBegin('TCloseOperationReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.closeReason !== null && this.closeReason !== undefined) {
    output.writeFieldBegin('closeReason', Thrift.Type.I32, 3329);
    output.writeI32(this.closeReason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCloseOperationResp = module.exports.TCloseOperationResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCloseOperationResp.prototype = {};
TCloseOperationResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCloseOperationResp.prototype.write = function(output) {
  output.writeStructBegin('TCloseOperationResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetResultSetMetadataReq = module.exports.TGetResultSetMetadataReq = function(args) {
  this.operationHandle = null;
  this.includeCloudResultFiles = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
    if (args.includeCloudResultFiles !== undefined && args.includeCloudResultFiles !== null) {
      this.includeCloudResultFiles = args.includeCloudResultFiles;
    }
  }
};
TGetResultSetMetadataReq.prototype = {};
TGetResultSetMetadataReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.BOOL) {
        this.includeCloudResultFiles = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetResultSetMetadataReq.prototype.write = function(output) {
  output.writeStructBegin('TGetResultSetMetadataReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.includeCloudResultFiles !== null && this.includeCloudResultFiles !== undefined) {
    output.writeFieldBegin('includeCloudResultFiles', Thrift.Type.BOOL, 3329);
    output.writeBool(this.includeCloudResultFiles);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetResultSetMetadataResp = module.exports.TGetResultSetMetadataResp = function(args) {
  this.status = null;
  this.schema = null;
  this.resultFormat = null;
  this.lz4Compressed = null;
  this.arrowSchema = null;
  this.cacheLookupResult = null;
  this.uncompressedBytes = null;
  this.compressedBytes = null;
  this.isStagingOperation = null;
  this.reasonForNoCloudFetch = null;
  this.resultFiles = null;
  this.manifestFile = null;
  this.manifestFileFormat = null;
  this.cacheLookupLatency = null;
  this.remoteCacheMissReason = null;
  this.fetchDisposition = null;
  this.remoteResultCacheEnabled = null;
  this.isServerless = null;
  this.resultDataFormat = null;
  this.truncatedByThriftLimit = null;
  this.resultByteLimit = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = new ttypes.TTableSchema(args.schema);
    }
    if (args.resultFormat !== undefined && args.resultFormat !== null) {
      this.resultFormat = args.resultFormat;
    }
    if (args.lz4Compressed !== undefined && args.lz4Compressed !== null) {
      this.lz4Compressed = args.lz4Compressed;
    }
    if (args.arrowSchema !== undefined && args.arrowSchema !== null) {
      this.arrowSchema = args.arrowSchema;
    }
    if (args.cacheLookupResult !== undefined && args.cacheLookupResult !== null) {
      this.cacheLookupResult = args.cacheLookupResult;
    }
    if (args.uncompressedBytes !== undefined && args.uncompressedBytes !== null) {
      this.uncompressedBytes = args.uncompressedBytes;
    }
    if (args.compressedBytes !== undefined && args.compressedBytes !== null) {
      this.compressedBytes = args.compressedBytes;
    }
    if (args.isStagingOperation !== undefined && args.isStagingOperation !== null) {
      this.isStagingOperation = args.isStagingOperation;
    }
    if (args.reasonForNoCloudFetch !== undefined && args.reasonForNoCloudFetch !== null) {
      this.reasonForNoCloudFetch = args.reasonForNoCloudFetch;
    }
    if (args.resultFiles !== undefined && args.resultFiles !== null) {
      this.resultFiles = Thrift.copyList(args.resultFiles, [ttypes.TDBSqlCloudResultFile]);
    }
    if (args.manifestFile !== undefined && args.manifestFile !== null) {
      this.manifestFile = args.manifestFile;
    }
    if (args.manifestFileFormat !== undefined && args.manifestFileFormat !== null) {
      this.manifestFileFormat = args.manifestFileFormat;
    }
    if (args.cacheLookupLatency !== undefined && args.cacheLookupLatency !== null) {
      this.cacheLookupLatency = args.cacheLookupLatency;
    }
    if (args.remoteCacheMissReason !== undefined && args.remoteCacheMissReason !== null) {
      this.remoteCacheMissReason = args.remoteCacheMissReason;
    }
    if (args.fetchDisposition !== undefined && args.fetchDisposition !== null) {
      this.fetchDisposition = args.fetchDisposition;
    }
    if (args.remoteResultCacheEnabled !== undefined && args.remoteResultCacheEnabled !== null) {
      this.remoteResultCacheEnabled = args.remoteResultCacheEnabled;
    }
    if (args.isServerless !== undefined && args.isServerless !== null) {
      this.isServerless = args.isServerless;
    }
    if (args.resultDataFormat !== undefined && args.resultDataFormat !== null) {
      this.resultDataFormat = new ttypes.TDBSqlResultFormat(args.resultDataFormat);
    }
    if (args.truncatedByThriftLimit !== undefined && args.truncatedByThriftLimit !== null) {
      this.truncatedByThriftLimit = args.truncatedByThriftLimit;
    }
    if (args.resultByteLimit !== undefined && args.resultByteLimit !== null) {
      this.resultByteLimit = args.resultByteLimit;
    }
  }
};
TGetResultSetMetadataResp.prototype = {};
TGetResultSetMetadataResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.TTableSchema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.I32) {
        this.resultFormat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.BOOL) {
        this.lz4Compressed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.STRING) {
        this.arrowSchema = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1284:
      if (ftype == Thrift.Type.I32) {
        this.cacheLookupResult = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1285:
      if (ftype == Thrift.Type.I64) {
        this.uncompressedBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1286:
      if (ftype == Thrift.Type.I64) {
        this.compressedBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1287:
      if (ftype == Thrift.Type.BOOL) {
        this.isStagingOperation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.I32) {
        this.reasonForNoCloudFetch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3330:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.resultFiles = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = new ttypes.TDBSqlCloudResultFile();
          elem326.read(input);
          this.resultFiles.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3331:
      if (ftype == Thrift.Type.STRING) {
        this.manifestFile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3332:
      if (ftype == Thrift.Type.I32) {
        this.manifestFileFormat = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3333:
      if (ftype == Thrift.Type.I64) {
        this.cacheLookupLatency = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3334:
      if (ftype == Thrift.Type.STRING) {
        this.remoteCacheMissReason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3335:
      if (ftype == Thrift.Type.I32) {
        this.fetchDisposition = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3336:
      if (ftype == Thrift.Type.BOOL) {
        this.remoteResultCacheEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3337:
      if (ftype == Thrift.Type.BOOL) {
        this.isServerless = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3344:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultDataFormat = new ttypes.TDBSqlResultFormat();
        this.resultDataFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3345:
      if (ftype == Thrift.Type.BOOL) {
        this.truncatedByThriftLimit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3346:
      if (ftype == Thrift.Type.I64) {
        this.resultByteLimit = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetResultSetMetadataResp.prototype.write = function(output) {
  output.writeStructBegin('TGetResultSetMetadataResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 2);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  if (this.resultFormat !== null && this.resultFormat !== undefined) {
    output.writeFieldBegin('resultFormat', Thrift.Type.I32, 1281);
    output.writeI32(this.resultFormat);
    output.writeFieldEnd();
  }
  if (this.lz4Compressed !== null && this.lz4Compressed !== undefined) {
    output.writeFieldBegin('lz4Compressed', Thrift.Type.BOOL, 1282);
    output.writeBool(this.lz4Compressed);
    output.writeFieldEnd();
  }
  if (this.arrowSchema !== null && this.arrowSchema !== undefined) {
    output.writeFieldBegin('arrowSchema', Thrift.Type.STRING, 1283);
    output.writeBinary(this.arrowSchema);
    output.writeFieldEnd();
  }
  if (this.cacheLookupResult !== null && this.cacheLookupResult !== undefined) {
    output.writeFieldBegin('cacheLookupResult', Thrift.Type.I32, 1284);
    output.writeI32(this.cacheLookupResult);
    output.writeFieldEnd();
  }
  if (this.uncompressedBytes !== null && this.uncompressedBytes !== undefined) {
    output.writeFieldBegin('uncompressedBytes', Thrift.Type.I64, 1285);
    output.writeI64(this.uncompressedBytes);
    output.writeFieldEnd();
  }
  if (this.compressedBytes !== null && this.compressedBytes !== undefined) {
    output.writeFieldBegin('compressedBytes', Thrift.Type.I64, 1286);
    output.writeI64(this.compressedBytes);
    output.writeFieldEnd();
  }
  if (this.isStagingOperation !== null && this.isStagingOperation !== undefined) {
    output.writeFieldBegin('isStagingOperation', Thrift.Type.BOOL, 1287);
    output.writeBool(this.isStagingOperation);
    output.writeFieldEnd();
  }
  if (this.reasonForNoCloudFetch !== null && this.reasonForNoCloudFetch !== undefined) {
    output.writeFieldBegin('reasonForNoCloudFetch', Thrift.Type.I32, 3329);
    output.writeI32(this.reasonForNoCloudFetch);
    output.writeFieldEnd();
  }
  if (this.resultFiles !== null && this.resultFiles !== undefined) {
    output.writeFieldBegin('resultFiles', Thrift.Type.LIST, 3330);
    output.writeListBegin(Thrift.Type.STRUCT, this.resultFiles.length);
    for (var iter327 in this.resultFiles)
    {
      if (this.resultFiles.hasOwnProperty(iter327))
      {
        iter327 = this.resultFiles[iter327];
        iter327.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.manifestFile !== null && this.manifestFile !== undefined) {
    output.writeFieldBegin('manifestFile', Thrift.Type.STRING, 3331);
    output.writeString(this.manifestFile);
    output.writeFieldEnd();
  }
  if (this.manifestFileFormat !== null && this.manifestFileFormat !== undefined) {
    output.writeFieldBegin('manifestFileFormat', Thrift.Type.I32, 3332);
    output.writeI32(this.manifestFileFormat);
    output.writeFieldEnd();
  }
  if (this.cacheLookupLatency !== null && this.cacheLookupLatency !== undefined) {
    output.writeFieldBegin('cacheLookupLatency', Thrift.Type.I64, 3333);
    output.writeI64(this.cacheLookupLatency);
    output.writeFieldEnd();
  }
  if (this.remoteCacheMissReason !== null && this.remoteCacheMissReason !== undefined) {
    output.writeFieldBegin('remoteCacheMissReason', Thrift.Type.STRING, 3334);
    output.writeString(this.remoteCacheMissReason);
    output.writeFieldEnd();
  }
  if (this.fetchDisposition !== null && this.fetchDisposition !== undefined) {
    output.writeFieldBegin('fetchDisposition', Thrift.Type.I32, 3335);
    output.writeI32(this.fetchDisposition);
    output.writeFieldEnd();
  }
  if (this.remoteResultCacheEnabled !== null && this.remoteResultCacheEnabled !== undefined) {
    output.writeFieldBegin('remoteResultCacheEnabled', Thrift.Type.BOOL, 3336);
    output.writeBool(this.remoteResultCacheEnabled);
    output.writeFieldEnd();
  }
  if (this.isServerless !== null && this.isServerless !== undefined) {
    output.writeFieldBegin('isServerless', Thrift.Type.BOOL, 3337);
    output.writeBool(this.isServerless);
    output.writeFieldEnd();
  }
  if (this.resultDataFormat !== null && this.resultDataFormat !== undefined) {
    output.writeFieldBegin('resultDataFormat', Thrift.Type.STRUCT, 3344);
    this.resultDataFormat.write(output);
    output.writeFieldEnd();
  }
  if (this.truncatedByThriftLimit !== null && this.truncatedByThriftLimit !== undefined) {
    output.writeFieldBegin('truncatedByThriftLimit', Thrift.Type.BOOL, 3345);
    output.writeBool(this.truncatedByThriftLimit);
    output.writeFieldEnd();
  }
  if (this.resultByteLimit !== null && this.resultByteLimit !== undefined) {
    output.writeFieldBegin('resultByteLimit', Thrift.Type.I64, 3346);
    output.writeI64(this.resultByteLimit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFetchResultsReq = module.exports.TFetchResultsReq = function(args) {
  this.operationHandle = null;
  this.orientation = 0;
  this.maxRows = null;
  this.fetchType = 0;
  this.maxBytes = null;
  this.startRowOffset = null;
  this.includeResultSetMetadata = null;
  if (args) {
    if (args.operationHandle !== undefined && args.operationHandle !== null) {
      this.operationHandle = new ttypes.TOperationHandle(args.operationHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operationHandle is unset!');
    }
    if (args.orientation !== undefined && args.orientation !== null) {
      this.orientation = args.orientation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field orientation is unset!');
    }
    if (args.maxRows !== undefined && args.maxRows !== null) {
      this.maxRows = args.maxRows;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field maxRows is unset!');
    }
    if (args.fetchType !== undefined && args.fetchType !== null) {
      this.fetchType = args.fetchType;
    }
    if (args.maxBytes !== undefined && args.maxBytes !== null) {
      this.maxBytes = args.maxBytes;
    }
    if (args.startRowOffset !== undefined && args.startRowOffset !== null) {
      this.startRowOffset = args.startRowOffset;
    }
    if (args.includeResultSetMetadata !== undefined && args.includeResultSetMetadata !== null) {
      this.includeResultSetMetadata = args.includeResultSetMetadata;
    }
  }
};
TFetchResultsReq.prototype = {};
TFetchResultsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.operationHandle = new ttypes.TOperationHandle();
        this.operationHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.orientation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.maxRows = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.fetchType = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.I64) {
        this.maxBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1282:
      if (ftype == Thrift.Type.I64) {
        this.startRowOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1283:
      if (ftype == Thrift.Type.BOOL) {
        this.includeResultSetMetadata = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFetchResultsReq.prototype.write = function(output) {
  output.writeStructBegin('TFetchResultsReq');
  if (this.operationHandle !== null && this.operationHandle !== undefined) {
    output.writeFieldBegin('operationHandle', Thrift.Type.STRUCT, 1);
    this.operationHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.orientation !== null && this.orientation !== undefined) {
    output.writeFieldBegin('orientation', Thrift.Type.I32, 2);
    output.writeI32(this.orientation);
    output.writeFieldEnd();
  }
  if (this.maxRows !== null && this.maxRows !== undefined) {
    output.writeFieldBegin('maxRows', Thrift.Type.I64, 3);
    output.writeI64(this.maxRows);
    output.writeFieldEnd();
  }
  if (this.fetchType !== null && this.fetchType !== undefined) {
    output.writeFieldBegin('fetchType', Thrift.Type.I16, 4);
    output.writeI16(this.fetchType);
    output.writeFieldEnd();
  }
  if (this.maxBytes !== null && this.maxBytes !== undefined) {
    output.writeFieldBegin('maxBytes', Thrift.Type.I64, 1281);
    output.writeI64(this.maxBytes);
    output.writeFieldEnd();
  }
  if (this.startRowOffset !== null && this.startRowOffset !== undefined) {
    output.writeFieldBegin('startRowOffset', Thrift.Type.I64, 1282);
    output.writeI64(this.startRowOffset);
    output.writeFieldEnd();
  }
  if (this.includeResultSetMetadata !== null && this.includeResultSetMetadata !== undefined) {
    output.writeFieldBegin('includeResultSetMetadata', Thrift.Type.BOOL, 1283);
    output.writeBool(this.includeResultSetMetadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TFetchResultsResp = module.exports.TFetchResultsResp = function(args) {
  this.status = null;
  this.hasMoreRows = null;
  this.results = null;
  this.resultSetMetadata = null;
  this.responseValidation = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.hasMoreRows !== undefined && args.hasMoreRows !== null) {
      this.hasMoreRows = args.hasMoreRows;
    }
    if (args.results !== undefined && args.results !== null) {
      this.results = new ttypes.TRowSet(args.results);
    }
    if (args.resultSetMetadata !== undefined && args.resultSetMetadata !== null) {
      this.resultSetMetadata = new ttypes.TGetResultSetMetadataResp(args.resultSetMetadata);
    }
    if (args.responseValidation !== undefined && args.responseValidation !== null) {
      this.responseValidation = args.responseValidation;
    }
  }
};
TFetchResultsResp.prototype = {};
TFetchResultsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasMoreRows = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.results = new ttypes.TRowSet();
        this.results.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1281:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetMetadata = new ttypes.TGetResultSetMetadataResp();
        this.resultSetMetadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRING) {
        this.responseValidation = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFetchResultsResp.prototype.write = function(output) {
  output.writeStructBegin('TFetchResultsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.hasMoreRows !== null && this.hasMoreRows !== undefined) {
    output.writeFieldBegin('hasMoreRows', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasMoreRows);
    output.writeFieldEnd();
  }
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.STRUCT, 3);
    this.results.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetMetadata !== null && this.resultSetMetadata !== undefined) {
    output.writeFieldBegin('resultSetMetadata', Thrift.Type.STRUCT, 1281);
    this.resultSetMetadata.write(output);
    output.writeFieldEnd();
  }
  if (this.responseValidation !== null && this.responseValidation !== undefined) {
    output.writeFieldBegin('responseValidation', Thrift.Type.STRING, 3329);
    output.writeBinary(this.responseValidation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetDelegationTokenReq = module.exports.TGetDelegationTokenReq = function(args) {
  this.sessionHandle = null;
  this.owner = null;
  this.renewer = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.owner !== undefined && args.owner !== null) {
      this.owner = args.owner;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field owner is unset!');
    }
    if (args.renewer !== undefined && args.renewer !== null) {
      this.renewer = args.renewer;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field renewer is unset!');
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TGetDelegationTokenReq.prototype = {};
TGetDelegationTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.owner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.renewer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetDelegationTokenReq.prototype.write = function(output) {
  output.writeStructBegin('TGetDelegationTokenReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.owner !== null && this.owner !== undefined) {
    output.writeFieldBegin('owner', Thrift.Type.STRING, 2);
    output.writeString(this.owner);
    output.writeFieldEnd();
  }
  if (this.renewer !== null && this.renewer !== undefined) {
    output.writeFieldBegin('renewer', Thrift.Type.STRING, 3);
    output.writeString(this.renewer);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3329);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGetDelegationTokenResp = module.exports.TGetDelegationTokenResp = function(args) {
  this.status = null;
  this.delegationToken = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.delegationToken !== undefined && args.delegationToken !== null) {
      this.delegationToken = args.delegationToken;
    }
  }
};
TGetDelegationTokenResp.prototype = {};
TGetDelegationTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.delegationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGetDelegationTokenResp.prototype.write = function(output) {
  output.writeStructBegin('TGetDelegationTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.delegationToken !== null && this.delegationToken !== undefined) {
    output.writeFieldBegin('delegationToken', Thrift.Type.STRING, 2);
    output.writeString(this.delegationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCancelDelegationTokenReq = module.exports.TCancelDelegationTokenReq = function(args) {
  this.sessionHandle = null;
  this.delegationToken = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.delegationToken !== undefined && args.delegationToken !== null) {
      this.delegationToken = args.delegationToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field delegationToken is unset!');
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TCancelDelegationTokenReq.prototype = {};
TCancelDelegationTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.delegationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelDelegationTokenReq.prototype.write = function(output) {
  output.writeStructBegin('TCancelDelegationTokenReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.delegationToken !== null && this.delegationToken !== undefined) {
    output.writeFieldBegin('delegationToken', Thrift.Type.STRING, 2);
    output.writeString(this.delegationToken);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3329);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCancelDelegationTokenResp = module.exports.TCancelDelegationTokenResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TCancelDelegationTokenResp.prototype = {};
TCancelDelegationTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCancelDelegationTokenResp.prototype.write = function(output) {
  output.writeStructBegin('TCancelDelegationTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRenewDelegationTokenReq = module.exports.TRenewDelegationTokenReq = function(args) {
  this.sessionHandle = null;
  this.delegationToken = null;
  this.sessionConf = null;
  if (args) {
    if (args.sessionHandle !== undefined && args.sessionHandle !== null) {
      this.sessionHandle = new ttypes.TSessionHandle(args.sessionHandle);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sessionHandle is unset!');
    }
    if (args.delegationToken !== undefined && args.delegationToken !== null) {
      this.delegationToken = args.delegationToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field delegationToken is unset!');
    }
    if (args.sessionConf !== undefined && args.sessionConf !== null) {
      this.sessionConf = new ttypes.TDBSqlSessionConf(args.sessionConf);
    }
  }
};
TRenewDelegationTokenReq.prototype = {};
TRenewDelegationTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionHandle = new ttypes.TSessionHandle();
        this.sessionHandle.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.delegationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3329:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionConf = new ttypes.TDBSqlSessionConf();
        this.sessionConf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenewDelegationTokenReq.prototype.write = function(output) {
  output.writeStructBegin('TRenewDelegationTokenReq');
  if (this.sessionHandle !== null && this.sessionHandle !== undefined) {
    output.writeFieldBegin('sessionHandle', Thrift.Type.STRUCT, 1);
    this.sessionHandle.write(output);
    output.writeFieldEnd();
  }
  if (this.delegationToken !== null && this.delegationToken !== undefined) {
    output.writeFieldBegin('delegationToken', Thrift.Type.STRING, 2);
    output.writeString(this.delegationToken);
    output.writeFieldEnd();
  }
  if (this.sessionConf !== null && this.sessionConf !== undefined) {
    output.writeFieldBegin('sessionConf', Thrift.Type.STRUCT, 3329);
    this.sessionConf.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRenewDelegationTokenResp = module.exports.TRenewDelegationTokenResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new ttypes.TStatus(args.status);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
TRenewDelegationTokenResp.prototype = {};
TRenewDelegationTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new ttypes.TStatus();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRenewDelegationTokenResp.prototype.write = function(output) {
  output.writeStructBegin('TRenewDelegationTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TProgressUpdateResp = module.exports.TProgressUpdateResp = function(args) {
  this.headerNames = null;
  this.rows = null;
  this.progressedPercentage = null;
  this.status = null;
  this.footerSummary = null;
  this.startTime = null;
  if (args) {
    if (args.headerNames !== undefined && args.headerNames !== null) {
      this.headerNames = Thrift.copyList(args.headerNames, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field headerNames is unset!');
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rows is unset!');
    }
    if (args.progressedPercentage !== undefined && args.progressedPercentage !== null) {
      this.progressedPercentage = args.progressedPercentage;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field progressedPercentage is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.footerSummary !== undefined && args.footerSummary !== null) {
      this.footerSummary = args.footerSummary;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field footerSummary is unset!');
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field startTime is unset!');
    }
  }
};
TProgressUpdateResp.prototype = {};
TProgressUpdateResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.headerNames = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = input.readString();
          this.headerNames.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size335 = 0;
        var _rtmp3339;
        this.rows = [];
        var _etype338 = 0;
        _rtmp3339 = input.readListBegin();
        _etype338 = _rtmp3339.etype;
        _size335 = _rtmp3339.size;
        for (var _i340 = 0; _i340 < _size335; ++_i340)
        {
          var elem341 = null;
          var _size342 = 0;
          var _rtmp3346;
          elem341 = [];
          var _etype345 = 0;
          _rtmp3346 = input.readListBegin();
          _etype345 = _rtmp3346.etype;
          _size342 = _rtmp3346.size;
          for (var _i347 = 0; _i347 < _size342; ++_i347)
          {
            var elem348 = null;
            elem348 = input.readString();
            elem341.push(elem348);
          }
          input.readListEnd();
          this.rows.push(elem341);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.progressedPercentage = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.footerSummary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TProgressUpdateResp.prototype.write = function(output) {
  output.writeStructBegin('TProgressUpdateResp');
  if (this.headerNames !== null && this.headerNames !== undefined) {
    output.writeFieldBegin('headerNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.headerNames.length);
    for (var iter349 in this.headerNames)
    {
      if (this.headerNames.hasOwnProperty(iter349))
      {
        iter349 = this.headerNames[iter349];
        output.writeString(iter349);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.rows.length);
    for (var iter350 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter350))
      {
        iter350 = this.rows[iter350];
        output.writeListBegin(Thrift.Type.STRING, iter350.length);
        for (var iter351 in iter350)
        {
          if (iter350.hasOwnProperty(iter351))
          {
            iter351 = iter350[iter351];
            output.writeString(iter351);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.progressedPercentage !== null && this.progressedPercentage !== undefined) {
    output.writeFieldBegin('progressedPercentage', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.progressedPercentage);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.footerSummary !== null && this.footerSummary !== undefined) {
    output.writeFieldBegin('footerSummary', Thrift.Type.STRING, 5);
    output.writeString(this.footerSummary);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 6);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.PRIMITIVE_TYPES = [0,1,2,3,4,5,6,7,8,9,15,16,17,18,19,20,21];
ttypes.COMPLEX_TYPES = [10,11,12,13,14];
ttypes.COLLECTION_TYPES = [10,11];
ttypes.TYPE_NAMES = {
  0 : 'BOOLEAN',
  1 : 'TINYINT',
  2 : 'SMALLINT',
  3 : 'INT',
  4 : 'BIGINT',
  5 : 'FLOAT',
  6 : 'DOUBLE',
  7 : 'STRING',
  8 : 'TIMESTAMP',
  9 : 'BINARY',
  10 : 'ARRAY',
  11 : 'MAP',
  12 : 'STRUCT',
  13 : 'UNIONTYPE',
  15 : 'DECIMAL',
  16 : 'NULL',
  17 : 'DATE',
  18 : 'VARCHAR',
  19 : 'CHAR',
  20 : 'INTERVAL_YEAR_MONTH',
  21 : 'INTERVAL_DAY_TIME'
};
ttypes.CHARACTER_MAXIMUM_LENGTH = 'characterMaximumLength';
ttypes.PRECISION = 'precision';
ttypes.SCALE = 'scale';
